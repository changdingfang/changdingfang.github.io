{"./":{"url":"./","title":"前言","keywords":"","body":"前言前言 通过极客时间大厂晋升指南整理而来(与之相比是一个简化版), 也希望想看的同学前去订阅, 李运华老师总结的很不错, 还有之前的一个 从零开始学架构专栏也很棒 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/promotion/rank_system.html":{"url":"docs/promotion/rank_system.html","title":"职级体系","keywords":"","body":"职级体系职称体系自立体系跨越式职级阶梯式职级职级体系 职级体系有两种, 一种是职称体系, 另一种是自立体系 职称体系 “职称”的正式名称是“专业技术职务任职资格”。常见的教师、医生、会计和律师等职业基本上用的都是这套体系。 它的优势在于标准统一，全国通行，可以无缝切换。比如一个医生在 A 医院是副主任医师，换到 B 医院的话，职称是可以平移的。职称这套体系在公务员、事业单位、国企等机构是通行的标准，但是在互联网行业很少应用。 自立体系 公司自己制定完整的职级体系，内部评估员工的级别，并根据职级体系设计相关的薪酬福利等激励机制。 自立体系的优势在于，公司可以根据自己的实际情况灵活操作，并不断演进；而它的劣势是，由于行业缺乏统一的标准，一个公司在吸纳其他公司的人才时，不太容易直接对标。 职级体系划分为专业线和管理线，专业线指员工在某个专业领域晋升，管理线指员工在管理岗位晋升。软件行业的研发、测试、运维、产品经理、运营、UI/UE、HR 等都属于专业线晋升 专业线按照其设计特点又可以划分为两类，那就是跨越式职级和阶梯式职级，涵盖了从毕业生到业界精英的各个级别 管理线一般不会再分领域，而且你在专业线达到一定级别后，才能转管理线发展 这样做的目的在于鼓励员工积累足够的专业技能，而不要变成只会发号施令开会写报告的纯管理者。 下面主要是专业线的两类职级体系的特点 跨越式职级 这个体系下两个级别之间的差异很大，就像有一条“级别鸿沟”，你需要用很大的力气才能跨越这条鸿沟。 特点一 相邻两个级别的差异比较大 因此，晋级的时候不是简单地要求能力“有提升”就可以了，而是要求有“本质的提升”。 举个简单的例子，你带 3 个人或者 4 个人，团队管理能力是没有本质的区别的；但是如果让你带 30 个人，团队管理的能力和带 3 个人的时候肯定差别很大，这就是本质的提升。 特点二 晋升的机会比较少 因为级别的差异比较大，所以晋升的机会比较少 特点三 同级别的回报差异是比较大的。 可能同样级别的两个员工, 他们的收入水平可能差异是挺大的 阶梯式职级 就是两个级别之间的差异不大，就像台阶一样稳步提升 阶梯式职级的级别差异没有跨越式职级没那么大，并没有明显的鸿沟。因此，阶梯式职级的特征，也和跨越式职级正好相反。 特点一 相邻级别差异小 由于阶梯式职级的级别之间的差异没有跨越式职级那么大，基本上按部就班逐级逐等晋升即可，过程相对平稳 特点二 晋升机会多 因为职级划分得比较细，所以同级别内的等级差异不明显。等级更多,机会也就更多 特点三 同级回报差异不大 因为级别划分已经比较细了，所以回报的范围区间就会比较小 阶梯式职级的缺点 很难客观地定义和评估两个等级之间的差异！ 当出现跨级晋升的时候，其实还是有“级别鸿沟”的。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/promotion/promotion_process.html":{"url":"docs/promotion/promotion_process.html","title":"晋升流程","keywords":"","body":"晋升流程提名阶段硬性条件预审阶段评审阶段复审阶段审批阶段沟通阶段晋升流程 完整的晋升流程 提名 主管决定要不要提名你去参加晋升。 预审 部门对提名的名单进行预审，如果你跟其他竞争者 PK 失败，就失去了晋升机会。 评审阶段 评委团对你进行评审，考察你的能力有没有满足要求。 复审阶段 部门对评审结果进行复审，确认你的晋升结果。 审批阶段 复审的结果上报高层审批，审批通过之后，你的晋升结果就最终确定了。 沟通阶段 主管或 HR 跟你沟通晋升结果。 在这 6 个阶段中，你直接参与的是“提名阶段”“评审阶段”和“沟通阶段”。其中“评审阶段”是最关键的，它在很大程度上决定了晋升是否能通过，但是在“提名阶段”“预审阶段”和“复审阶段”，你也可能会被刷掉。 提名阶段 整个晋升流程的起点就是提名阶段，相当于九九八十一难的第一关 硬性条件 如果你想申请晋升，至少要满足以下 4 个条件： 绩效条件 你的绩效不能差，至少要达到“正常”水平。你要是绩效垫底，恐怕就不能参加晋升了。 年限条件 你在当前级别的工作年限，必须满足晋升的硬性规定。不同职级体系要求不同，阶梯式职级一般要满 1 年，跨越式一般要满 2 年。 红线条件 有的公司有内部处罚的政策，要是违反这些政策，你就会被取消当年甚至几年之内的晋升资格。你也需要满足这一类涉及红线的条件。 附加条件 有的公司为了鼓励员工重视某些事情，可能会将它跟晋升挂钩，最典型的就是专利。 比如，公司规定，晋升到某个级别必须要有专利，没有专利就一票否决。所以你也需要满足这类条件。 并不是只要满足这四个条件，你就一定能够申请晋升。因为它们只是硬性条件，至于你的能力有没有达到下一级别的要求，没法硬性规定，只能由人来判断。 而这个判断的人一般是自己的主管，通常是主管认可且自己也有晋升的打算才能被提名 预审阶段 提名之后就是预审。预审阶段主要是针对提名晋升的名单，进行部门内的一次横向拉通对比。这样做的目的主要有两个 第一个是防止主管放水，提名太多。 第二个目的则是防止主管之间的能力评价标准相差太远。 预审通常有两种方式，书面预审和会议预审。 书面预审 管理者会查看材料中关于你的能力和项目的描述，再结合自己平时对你的了解来评估。 会议预审 由管理者组织会议，让其他主管一起来审核。 主管需要介绍自己提名的员工，然后接受其他人的“挑战”。 因此，各个主管对你的了解程度就很关键。这就意味着你在平时的工作中，不要以为对方不是你的主管就可以不理他，甚至直接“怼”他，毕竟有人的地方就有江湖。 评审阶段 整个晋升流程中最核心的阶段是评审阶段。你需要向评委团展现自己的能力，并且经受他们的考察 整个评审阶段和多人面试基本类似，你需要先准备答辩 PPT（材料准备），然后面对评委团（3 个以上评委）先进行自述，展现自己的亮点（晋升自述）。 你讲完后，会有多个评委来通过问答的方式来对你进行考察，验证和判断你是否达到了晋升要求（晋升答辩）。答辩完成后，评委会指出你的优缺点，并提出后续改进建议 最终，评委团基于答辩情况以及评委们的判断，做出你是否晋升通过的判断，但这个环节的结果还不是最终晋升结果（结果确定）。 评委团可以通过两种方式来给出评审结果：集体讨论和独立投票。 复审阶段 复审阶段主要是通过总体的数据来判断晋升情况，这个数据一般是晋升通过率。各个公司会根据实际情况给出一个指导性的参考值，只要不偏离太远，都是可以的。 审批阶段 复审之后，公司层面会对各个部门上报的晋升结果做最终的确认，然后确定薪资涨幅和股权激励之类的方案。 这部分的操作已经不是一般员工能够介入的范围了，你就不用关心了，只要知道有这么一个阶段就可以了。 沟通阶段 晋升流程的最后一步就是沟通阶段，主管（有时候会拉上 HR 一起）会把最终的晋升结果反馈给你。你要是顺利通过了，这次沟通肯定是比较愉快和顺畅的；但你要是不幸没有通过，主管的沟通压力就又上来了。 好在走到这一步，大部分申请者对于自己能否通过，心里还是有数的，所以整体来说，沟通不算太难。 不过，无论你的晋升通过还是不通过，你的主管都需要明确地给出指导意见，并安排相应的工作来帮助你成长。如果他忘了，记得提醒他。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/promotion/promotion_principle.html":{"url":"docs/promotion/promotion_principle.html","title":"晋升原则","keywords":"","body":"晋升原则主动原则成长原则价值原则晋升原则 主动原则 主管不一定会关注你的成长，所以不要一心指望着主管来给自己安排 有许多与工作相关的信息，可能需要自己主动去了解才能知道。比如：业务功能上线后效果如何，整体的业务机房部署结构什么样等等 主管规划工作任务后，主动跟别人了解更多的信息，合起来就是主动做事 知道主动原则后，就知道具体如何去做了 第一，主动找主管沟通工作 不管主管是什么风格，你都应该定期或者不定期地找他沟通关于工作任务的想法和意愿。一方面是听听他对自己的看法，获取指导建议；另一方面，你也可以借此机会了解更多关于团队、业务和部门的信息，有机会的情况下尽量主动承担有挑战性的工作。 很多信息，你不跟他聊，他不一定跟你讲 第二，主动找别人沟通，了解更多信息 很多人害怕主动找别人要东西，可能有性格方面的原因，但更主要的原因还是动力不足。如果你能够意识到主动沟通带来的价值，很多时候就敢放开手脚干了。 成长原则 思维陷阱 第一个陷阱: 以为事情做得多，自然就能晋升。 只做自己会做的事情，不断地重复，你只会变成熟练工，而不会成为技术专家。所以，不要把 1 年的工作经验重复 10 年，而要真正积累 10 年的工作经验。 第二个陷阱: 以为事情做得好，自然就能晋升。 晋升，不光要看功劳和苦劳，更要看成长。 一边做事一边挖掘成长点、提升自己能力的人，比光顾着做事的人更容易晋升 如何去做 比如现在手头上的工作已经可以轻松完成，这时可以尝试更高难度、更高复杂度的事情，而不是一味的刷熟练度，沉迷在自我感觉良好的状态里。 比如你一直做业务开发，已经成为了组里的骨干，不但效率高，而且质量又好。那么你就可以试着完成方案设计、架构设计、架构重构和系统优化等工作。 另外，不管事情做好了还是没做好，你都应该多做复盘总结，找到可以提升优化的点。 即使顺利完成的事情，也应主动挖掘可以成长的点 价值原则 学习为公司产出价值的技能 公司设计职级体系的初衷，是为了衡量不同员工的能力级别，然后根据级别来制定相应的薪酬、福利、管理等制度，同时鼓励员工尽量提升自己的能力，为公司产出更大的价值。 让能力为公司产出价值的人，比空有一身能力的人更容易晋升。 价值原则除了告诉我们某项技能值不值得学以外，还能告诉我们要学到什么程度。以“人工智能”为例，不同的人来学，学习的方法和深度也是不一样的，一定要避免陷入“学习等于看源码”这个误区。 如果你是做算法的，人工智能应用场景、算法原理、框架源码都需要去学习 如果你是做 App 开发的，学习的重点可能就是人工智能的原理和应用场景了 如果你是 P9 级别，学习的重点可能是人工智能的基本原理、行业的发展现状、成功和失败的案例，还有相关的产业链信息 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/promotion/promotion_logic.html":{"url":"docs/promotion/promotion_logic.html","title":"晋升逻辑","keywords":"","body":"晋升逻辑提前做下一级别的事做好当前级别的事基础、熟练和精通的区别通用的晋升步骤晋升逻辑 看似客观得到常见做法 以当前级别的年限为标准 以工作年限为标准 以绩效为标准 无论什么年限都不是我们判断能力的标准。花 1 年时间掌握某项技能然后重复 9 年，和 10 年时间不断在提升，两者的能力差距是巨大的。 绩效不能等同于能力。绩效关注的是业务结果，晋升关注的是能力提升。 提前做下一级别的事 在当前级别做下一级别事情的人，才有机会晋升 所以，如果要判断自己是不是能够申请晋升了，一种简单有效的方式是，看你做的事情是不是和下一级别的人类似。 做好当前级别的事 只有把当前级别的事情做好了，才有机会晋升。 晋升成功只是意味着你的能力达到了当前级别的基础水平，但还不一定有熟练和精通的程度。如果你还想要晋升到下一个级别，就必须先在当前级别达到精通。 基础、熟练和精通的区别 基础 基础意味着“会做”。如果你会做某个级别要求的事情，就说明已经具备了基础能力。当然，这里的“会”是指能够独立自主地完成，而不是别人想好之后告诉你，你再按照别人的话去做。 熟练 熟练意味着“做好”。跟基础不同，熟练是指能够把当前级别的事情做好。做好体现在做事熟练，掌握了做事的最佳实践，能够保证效率和质量，能够拿到好的结果。 精通 精通意味着“优化”。精通是指能够优化当前级别的事情，比如采取不同的方式、思维和工具来做同样的事情，并取得突破。 要注意的是，这套标准，是用来判断在某个级别所要求的能力，而不是单项技能的水平。 比如，你从事开发工作，P5/P6 的核心职责是项目开发，而项目开发会涉及到业务理解、项目计划、编程语言和 Bug 修复等一系列的单项技能。对于这些具体技能的水平，用技术广度或者技术深度来区分会更合适。 通用的晋升步骤 第 1 步，按照晋升原则的指导，在当前级别拿到好的结果，为公司创造价值，同时把当前级别要求的能力提升到精通程度（比如从 P6- 到 P6+），这样你才有机会成为晋升备选人员。 第 2 步，到了精通程度之后，对照下一级别的要求来提升自己的各种能力（比如到了 P6+ 之后，按照 P7- 的要求来提升自己），为可能的晋升机会做好准备。 第 3 步，主动寻找工作机会，尝试做下一个级别事情（比如提升了 P7 的能力之后，找 P7 级别做的事情来做，争取成为负责人，主导事情的推进和落地），继续拿到好的结果，向主管证明你具备下一级的能力。 第 4 步，拿到工作结果之后申请晋升，向评委介绍你做过的事情，展示相关的能力和结果，证明自己具备了下一级别要求的能力。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/promotion/comd.html":{"url":"docs/promotion/comd.html","title":"COMD能力模型","keywords":"","body":"COMD能力模型规模复杂度时间复杂度环境复杂度创新复杂度实例如何应用COMDCOMD能力模型 面向复杂度的多维度能力模型（Complexity-Oriented & Multi-Dimension Capability Model），简称 COMD 能力模型。 COMD 的 CO 是指 Complexity-Oriented，意思是“面向复杂度”（灵感来源于“面向对象”）；MD 是指 Multi-dimension，意思是“多维度”，也就是技术、业务和管理 3 个维度。 COMD 的核心指导思想是，通过事情的复杂度来判断能力的高低，级别越高，所做的事情复杂度也越高。 COMD 能力模型还进一步地明确了复杂度，具体包括规模复杂度、时间复杂度、环境复杂度和创新复杂度 4 种类型。 规模复杂度 规模复杂度是指和规模大小有关的复杂度 规模越大，复杂度越高。原因在于规模越大，节点越多，节点间的关系越复杂，而且节点间的关系复杂度是指数增长的。就像下面的图片所展示的：当节点数只有 3 个时，节点间的关系也只有 3 个；而节点数达到 6 个时，节点间的关系就变成了 15 个，复杂度提升了 5 倍。 按照这个原理，可以对一些常见工作维度的规模复杂度进行比较，具体如下表所示。 时间复杂度 时间复杂度是指和时间跨度有关的复杂度。 时间跨度越长，复杂度越高。原因在于万事万物都处于不断发展变化当中，时间跨度越长，变化的因素和可能方向越多，越难判断准确。 三大维度的时间复杂度的对比举例如下表所示。 环境复杂度 环境复杂度是指和环境不确定性有关的复杂度。 我们很多的判断、决策和行为都依赖于对环境的认知和反应。总的来说，环境不确定性越高，复杂度越高。 环境的不确定性具体分为环境的稳定性、环境的透明性和环境的可预见性 3 个方面： 环境的稳定性 指环境变化的速度快慢。 环境的透明性 指是否能够明确地获取环境相关的信息。 环境的可预见性 指是否会发生完全无法预料的黑天鹅事件。 下面这个表格从宏观的角度分析了技术、管理和业务三个维度所面临的环境不确定性。 创新复杂度 创新复杂度是指和创新程度有关的复杂度。 常见的创新包括理论的创新、思想（或者说方法）的创新和技巧的创新。理论创新的复杂度要高于思想创新，而思想创新的复杂度又高于技巧创新。 以高可用技术领域为例： FLP 原理和 CAP 定理属于理论创新 它们奠定了分布式高可用设计的基础和边界，无论是缓存系统、存储系统、批处理系统、流式处理系统还是采用微服务架构的业务系统等，都不能跳出这两个理论的约束和限制。 批处理和流处理属于思想创新 对于大数据技术来说，一开始 Google 提出的批处理思路开启了大数据时代，而后来 Storm 开启了流处理这个新的技术领域。 实现 Exactly Once 特性属于技巧创新 开源框架 Flink 使用 Chandy-Lamport 算法，实现了流处理 Exactly Once 的特性，能够实现消息精确投递，避免重复消息导致业务出错。 创新复杂度越高，影响的范围往往也越大。理论创新会奠定整个行业的基础，而思想创新可能开辟一个新的技术领域。 各领域的部分典型创新案例如下表所示 除了刚才说的这 4 种通用的复杂度之外，在每个领域内部，也会有一些工作的复杂度本身就要比另一些工作高。 比方说在软件开发领域，我们一般认为各项工作的复杂度排序是这样的： 从0到1创造系统 > 架构重构 > 项目方案设计 > 编码实现 实例 比如在某些大厂，“系统思考”的确是写在 P7 级别的能力描述里，但它不是 P7 级别才有的能力特征。实际上，P6 以上的级别都要求“系统思考”，区别只是思考的范围不同，也就是规模复杂度不同而已。 以 B2C 电商业务开发为例，在某些大厂，不同级别“系统思考”的范围如下图所示： 对于 P6 来说，系统思考的范围是某个需求，需要考虑需求的合理性、设计的可扩展性和上线后的稳定性等问题。 对于 P7 来说，系统思考的范围是单个系统，需要考虑的是单个系统的架构设计、架构重构和技术选型等问题。 对于 P8 来说，系统思考的范围是某个领域，需要考虑的是领域的发展趋势、架构演进、团队组织结构等问题。 对于 P9 来说，系统思考的范围是多个关联的业务域组成的业务线，需要考虑业务发展趋势、架构演进、团队组织结构等问题。 如何应用COMD 当你想要了解某个级别的能力要求的时候，不要再对着那些抽象和模糊的词语，不着边际地猜测和想象了。你应该静下心，坐下来填一个“能力矩阵”的表格，把每一项的要求都完整且具体地列出来。比如下面这个“能力矩阵”表格就摘录了 P6 级别的部分要求，可以作为参考。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/promotion/promotion_grade.html":{"url":"docs/promotion/promotion_grade.html","title":"职级档次","keywords":"","body":"职级档次专业工匠乐队指挥电影导演职级档次 专业工匠 P5 和 P6 的职责一样，比较简单，不需要太多解读。这两个级别的区别是，P5 需要在别人的指导下完成工作，而 P6 可以独立完成工作。其实只要有意愿在技术领域发展，基本上每个人都能达到 P6 的水平。 这里列举的只是一个岗位的核心职责，并不代表这个岗位只做这些事情，比方说开发岗位的 P7/P8 也是要参与编码的。 乐队指挥 P7/P8 这一档相当于“乐团指挥”，核心能力是指挥团队。 狭义上的团队 组织结构上的行政级别团队，比如 P7 担任的 3～10 人团队的 Team Leader，负责团队管理、团队规划、团队考核和团队建设等管理职责。 广义上的团队 为了完成某个目标而成立的虚拟团队（或者说临时团队），比如某个项目投入的人员组成了“项目团队”（由公司立项成立），某个专项任务投入的人员组成了“专项团队”（由管理者安排，比如“研发效能提升工作组”）。 P7/P8 的核心职责如下表所示。 电影导演 P9/P10 这一档相当于“电影导演”，核心能力是导演作品。 第一，他们的工作都具有一定的规模。第二，他们都是总决策者。第三，他们都是总负责人。 虽然对于 P9/P10 的工作成果，并没有一个通用的打分机制，但是公司能通过一些硬指标来衡量，最典型的就是直接看业务结果。 如果你负责的业务结果实现了既定的业务目标，那么你就是成熟的导演，可以胜任 P9；如果你负责的业务结果按照某个标准（用户量、收入和权威机构的测评等），进入了业界前列，有一定的名气和影响力，那么你就是成名的导演，可以胜任 P10。 P9/P10 的核心职责如下表所示。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/detail_rank/worker.html":{"url":"docs/detail_rank/worker.html","title":"打工人","keywords":"","body":"打工人技术业务管理打工人 打工人对应p5, 一般都是刚从学校出来的毕业生 核心能力是在别人的指导下完成任务 在别人的指导下: p6或p7带p5 任务: 项目各个阶段的各项活动(如开发, 任务包括需求评审、方案设计、编码、修改bug等) 学校和在公司工作是有很大的区别的 主要体现在三个方面 技术差异 学校偏理论, 工作对深度和实践要求更高 业务差异 学校不会针对某个公司的具体业务进行教学, 而互联网行业业务领域多、发展快. 这些业务知识是完成工作的基础, 但刚毕业时, 往往没有这方面的积累 管理差异 学校管理课程比较理论化, 公司的规章制度和项目流程有很多细化和具体的要求 比如怎么熟悉和适应工作岗位的管理要求, 怎么跟别人协作, 怎么推动事情落地, 这些都是完成工作的基础 技术 在该阶段最重要的是基础技术的积累 学习基础知识 这里的基础技术是指工作岗位实际用到的技术, 不同的岗位要求不同. 系统学习 工作中遇到一个问题或一个技术点, 通过上网搜索几篇文章学习一下, 这是碎片化学习, 特点是投入时间少, 但效果难以保证.首先, 工作中不可能遇到某个技术点相关的所有问题; 其次是通过这种方式, 只能知道一个个零散的技术点, 而不知道这些技术点之间的关系. 以 HTTP 缓存为例，如果只是单纯去搜索“HTTP Cache-Control”，你确实可以知道 no-cache 和 no-store 等名词的含义。但是整个 HTTP Cache 协议、浏览器的处理逻辑和服务器的处理机制这些技术点你就学不到了，而它们在分析 HTTP 性能相关的问题或者优化 Web 页面的时候都是必须掌握的 工作中时间都是碎片化的, 很难有整段的学习时间, 所以可以碎片化时间, 系统化学习.每天抽出一小段时间有计划的学习某项技术, 总体学习内容是系统化的. 想让学习系统化，最简单的办法就是对照一本经典的书籍循序渐进地学习。 虽然你不能把所有的内容都一次性学懂，但至少在学完一遍后，可以对一项技术的完整体系建立整体印象。这样，你后续再深入学习这项技术的时候，效率也会更高。 业务 对业务的要求主要是熟悉业务的处理逻辑 广义的业务: 提供的功能和服务 一般情况下，我们听到“业务”这个词的时候，都会理解为“某个行业的相关服务”，比如电商业务、支付业务、社交业务、游戏业务，其实这些都是“狭义”上的业务。 处理逻辑: 实现功能和服务的步骤 指实现这项业务提供的功能和服务所需要的步骤. 也就是说第一步需要做什么, 第二步需要做什么..., 依次类推 对于2C的业务来说, 熟悉业务最有效的方法就是让自己成为产品的深度用户对于2B的业务来说, 熟悉业务最有效的方法可能是多跟客户交流 管理 要求主要是了解公司的管理制度和项目流程，知道自己在项目流程中的职责和任务，熟悉上下游的依赖以及如何推进项目。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/detail_rank/project_expert.html":{"url":"docs/detail_rank/project_expert.html","title":"项目能手","keywords":"","body":"项目能手技术业务管理项目能手 项目能手对应p6 P6 对应的工作年限是 2～5 年，核心能力要求可以用一句话来概括: 独立负责端到端的任务。这句话有两个关键词： 独立 不需要别人带着做了。P5 和 P6 的开发人员都会参加需求评审，只不过 P5 参加的时候只是在听，而 P6 可能就会针对需求直接提出意见。 端到端 负责项目中的某部分功能的全流程相关事项。开发的端到端事项包括需求评审、方案设计、编码、修改 bug 和上线等；测试的端到端事项包括需求评审、测试方案设计、执行测试和上线等；而产品的端到端事项则包括用户分析、需求写作、数据分析和竞品分析等。 技术 P6 在技术方面的核心要求是熟练掌握端到端的工作流技术，因为 P6 是项目主力劳动力，需要参与项目流程中的某些阶段，完成分配的任务。 在 P6 阶段，提升技术能力的关键就是掌握团队用到的各种技术的“套路”。以 Android 开发人员为例，套路包括设计模式、SOLID 设计原则、Android 的 MVP 架构和各类工具（比如 Fiddler，Wireshark，tcpdump）等。不同岗位的“套路”不同，可以自行整理，也可以求助团队中有经验的同事。 除了熟练使用套路，P6 还需要深入理解套路背后的技术原理和细节，提升自己的技术深度。 以设计模式为例，P5 可能只知道每个设计模式是什么意思，但是 P6 还要知道什么时候用设计模式，什么时候不用设计模式，具体应该用哪个设计模式。 P5 只知道 what，P6 还知道 why。 重点抓住跟当前工作内容强相关的技术点和技术套路，深入学习和研究，重点提升技术深度。如果有精力，你再去拓展学习一些暂时用不到、但以后很可能会用到的技术。千万不要因为短时间内什么流行就去学什么，一会儿学这个一会学那个，结果什么都懂一点，什么都不精通。 业务 要求对功能掌握的更全面, 基本上要掌握某类业务的所有功能, 再一个是对逻辑处理的理解更深刻, 要求理解需求的\"上下文信息\".比如需求能给用户或客户带来什么价值, 解决了什么问题, 为什么设计5个步骤而不是3个步骤, 为什么竞品的功能设计跟我们不一样 p6对业务能力的要求 管理 P6 管理能力的要求主要是能够负责项目中的子任务推进。 p6对管理能力的要求 工作量评估 拍脑袋法 让团队有经验的人直接拍脑袋想一个工作量数字。 扑克牌法 找 3～5 个人员，每人给一张小纸条，每个人把工作量评估写在纸条上，最后取平均值。 对比法 参考曾经做过的类似的项目，看看之前的项目工作量是多少，然后以此为基础想一个数字。 WBS 分解法 把需求拆解为多项小任务，单独评估每个小任务的工作量，然后汇总；评估小任务的工作量的时候可能采取上面这 3 种方法。 WBS 的全称是 Work Breakdown Structure，中文翻译是“工作分解结构”。WBS 分解法的原理是，通过把项目工作按阶段可交付成果分解成更小的、更易于管理的组成部分，来提升项目管理的效率。 避免过于乐观的评估, 给工作量评估时加一个buffer, 来避免意外发生 既在原有的工作量上乘上一个浮动系数来决定最终工作量例如估计的是10人天, 那buffer系数取1.2, 查考工作量就是12人天 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/detail_rank/team_experts.html":{"url":"docs/detail_rank/team_experts.html","title":"团队专家","keywords":"","body":"团队专家技术业务管理团队专家 团队专家对应于P7 核心要求是指挥单个团队达到目标 团队 一种是担任Team Leader 的 P7，一般带 3～10 人的专业团队，也就是组织结构概念上的团队，核心职责是团队管理 另一种是团队骨干P7, 一般负责某个项目或者专项小组, 带 3～5 人的虚拟团队。他们不承担团队管理职责，只关注小组目标的实现 目标 担任 Team Leader 的 P7 主要是带领团队实现业务目标，担任虚拟团队负责人的 P7 主要是实现小组的专项目标。 技术 在技术维度上的核心要求是精通团队相关技术。 首先自己要精通团队已经用到的技术；另一方面，已经开始负责团队的技术规划，需要在合适的时机引入新的技术，所以也要熟悉团队可能用到的技术 技术详细要求 提升技术宽度 要知道怎么根据业务和团队的情况来选择合适的技术，哪怕现在暂时还用不到。 提升技术深度适合用链式学习法，纵向贯穿，自顶向下，挖深挖透；提升技术宽度适合用比较学习法，横向拉通，比较差异，分析优劣。 多考虑引入新技术 不能直接拷贝大厂技术, 正所谓橘生淮南则为橘, 橘生淮北则为枳也不能技术刚出来就引进, 新技术刚出来的时候还不够成熟, 后续变化可能很大. 如果引入的太早, 团队可能就需要投入大量的人力来跟进技术的发展. 引入新技术的时候要求能够想清楚对业务和团队带来的价值，而不是仅仅因为“新”就引入 业务 在业务维度，P6 更关注业务细节，而 P7 更关注业务整体。这里的业务范围是自己团队负责的业务。 对业务的详细要求 从四个方面提升业务理解能力 用户特征 我们的用户是谁 按属性划分: 学历、年龄、收入等 按场景划分: 网购、旅游、外卖等 用户价值 用户为什么要用我们的产品 我们的产品优势体现在哪里 获客方式 怎么让用户来使用我们的产品 获利方式 我们怎么赚钱 从这四个方面进行拆解, 要求对业务理解至少要达到下面四点, 并能够量化到具体数据. 知道行业的用户规模, 自己的业务总的用户量, 用户的特征分布 熟悉行业的竞品, 包括行业的排名、竞品的数据以及竞品间的差异和对比 熟悉常见的获客手段和效果指标（ROI、转换率和留存率等），知道对自己的业务来说效果最好的 3～5 个获客手段以及原因。 熟悉常见的获利手段和效果指标（数值和比例等），知道对自己的业务来说最核心的 3～5 个获利来源。如果负责的是用户子系统这种不直接产生收入的业务，则可以了解自己的业务对收入会有什么影响 如果上面的方法应用在 2C 业务中，就是有名的 AARRR 漏斗模型如果是2B业务, 也可以参考这个 AARRR 漏斗模型的思路, 还要了解行业强相关的手段和措施 管理 要求不再只是完成自己的任务，而是还需要你带领团队一起把事情做好。 对管理的详细要求 管理要避免走极端 第一种极端是事必躬亲 仍然按照以前的做事方法来带团队，无论事情大小都亲力亲为。 缺点:首先，你自己会觉得非常累。毕竟一个团队的事情很多，以前你只要做好自己的事情，可能还觉得游刃有余；现在如果要做团队所有人的事情，肯定是吃不消的。其次，团队成员感受不到你的信任，他们会觉得自己发挥的空间太小，没有提升空间。长此以往，就会人心浮动，非常不稳定。 第二种是甩手掌柜 只做管理不做事。来一个任务，就找一个团队成员负责跟进，只要不出问题就不管。 缺点:首先，Team Leader 的专业技能会逐渐退化，后续的晋升基本无望；其次，因为技能的退化，他对团队的影响力也会逐渐减弱，团队越来越难带，很难拿到好的结果。 系统化地掌握管理的基本技能 所谓系统化就是从整体上理解管理的手段和范围所谓基本技能就是指团队怎么制定决策和执行任务 找好技术和管理的平衡点 三七比例法。也就是说，平均下来管理工作时间占 30%，技术工作时间占 70%。 这个比例可以根据实际情况灵活变化，比如项目紧的时候二八开，年终总结汇报的时候四六开。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/detail_rank/domain_experts.html":{"url":"docs/detail_rank/domain_experts.html","title":"领域专家","keywords":"","body":"领域专家技术业务管理领域专家 领域专家对应P8 核心能力要求: 指挥多个团队达成目标。 这些跟业务发展阶段和团队规模大小有关，通常有两种构成模式。 第一种是横向模式, 指的是带领的团队的专业领域相同，横向支撑多个业务 第二种是纵向模式, 指的是带领的团队的专业领域不同，端到端地纵向负责同一业务比如 1 个 P8 负责带某业务的所有技术团队，包括客户端（含 Android 和 iOS）、前端、后端、运维和测试等。 影响力上相比于上一级却发生了本质的改变，主要体现为两点 专业影响力范围从团队内提升到领域内。 组织影响力范围从单个团队提升到跨团队。 P7 只需要指挥自己团队内部的人就行了。但 P8 不同，虽然已经带了 2～5 个 10 人以内规模的团队，但是要想实现目标，光靠他们有时还不够，P8 还需要指挥这些团队以外的人。比如有的项目涉及产品和运营配合，有的需要客户端、后台、运维一起协作。 这对管理手段有更高的要求 技术 技术详细要求: 技术深度 + 领域相关的技术宽度 该级别与上一个级别都要求技术宽度, 但这个级别要求的是领域相关的宽度, 要比上个级别范围大得多, 要学习和提升的东西也多得多. 领域的划分和边界 一是按照技术领域划分比如 Android 开发、Java 业务开发和大数据等。 二是按照业务领域划分比如推荐业务、广告系统和支付业务等。 提升技术深度和技术宽度 第一种方法是研究业界的开源项目第二种方法是参加业界的技术大会 业务 如果是横向模式，P8 需要熟悉团队涉及的每一个业务。而且因为这些业务本质上属于某个大的行业，为了能够更好地理解业务，P8 还需要对行业有一定理解。 如果是纵向模式，P8 只负责 1 个业务。跟横向模式相比，虽然需要熟悉的业务数量更少，但是对于理解深度的要求要高得多，除了要熟悉自己负责的业务之外，还要深入理解公司内或者行业内类似的业务。 对业务的详细要求: 管理 对管理的详细要求: 相比上一个阶段该阶段的难点: 团队人员数量变多，不可能熟悉每个人了。 项目数量大大增加，不可能参加每个项目了，包括需求评审、方案设计等。 需要参与的各种管理事项大大增加。 团队管理: 搭建梯度 因为 P8 无法关注团队的每一个人，很多事情的传达和具体执行效果是靠 P7/P6 级别的人来把控的，所以 P8 需要重点关注搭建合理的团队梯度，包括核心的 TL/P7/P6 有哪些，核心人员的状态，核心人员的晋升规划等，都是需要重点考虑的。 每个核心人员都至少有一个备份人员。比如 P8 自己要有 1 个以上的 P8/P7+ 能够做自己的备份人员，每个 TL 要有 1 个潜在的 TL 备份人员，每个核心业务都至少有 2 个 P7 能够支撑，依此类推。 目标管理: 参与制定, 保证理解 P8 需要指挥多个团队达成业务目标，所以对于业务目标的制定和理解是很关键的。 对于最终确定的业务目标，P8 级别的人必须是充分理解和赞同的，因为之后 P8 还需要向团队(包括自己直接指挥的团队和相关协作团队)解读业务目标。如果不理解或者不赞同，在目标讨论过程中就应该提出来，经过讨论或者 PK 最终达成共识，这样才能为团队拿到更合理的业务目标。 千万不能在讨论业务目标的时候不认同或者不理解但是却不说，然后跟下面团队沟通的时候来一句“其实我也不怎么认同这个目标”，这样做会大大伤害团队的积极性和稳定性。 技术管理: 关注演进 P8 级别负责的是整个领域的技术，需要重点关注领域技术的演进 相比P7的几个优势: 一是技术视野，P8 关注的是整个领域的技术，技术宽度比 P7 更强 二是团队资源，领域技术的演进投入可能会比较大，P8 能够协调多个团队共同来完成 三是业务理解能力，P8 的业务理解能力更好，而且能够掌握更多的业务信息，所以更容易结合业务来考虑技术演进。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/detail_rank/business_director.html":{"url":"docs/detail_rank/business_director.html","title":"业务导演","keywords":"","body":"业务导演技术业务管理业务导演 业务导演对应P9 核心能力要求: 导演成熟的作品 他的核心职责和电影导演类似，都包括制定目标（要拍一部什么样的电影）、整合资源（投资方、演员、编剧等）、做出决策（钱花在什么地方、找谁来主演等）以及完成作品（拍出最后上映的电影，并且拿到一定的票房，至少要赚钱）。 不一定精通每一个专业领域，但一定是跨领域整合的高手。 P9 的主要提升目标是跨域整合的业务导演 技术 P9 及以上级别在技术维度上的提升，并不是体现在单个领域技术能力本身，而是体现在整合跨领域的技术方案来打造成熟落地的作品上。 案例：面向业务的立体化高可用架构设计 李运华晋升 P9 时展示的一个作品。在 2015 年左右负责阿里游戏高可用项目，这个项目涵盖客户端（Android）、运维、后端架构重构和异地多活架构设计，整体结构如下： 这个作品有三个特别的亮点： 将“4 个 9”这种不直观的高可用指标拆解为“3 分钟定位问题、5 分钟恢复业务、平均最多 2 个月发生一次问题”。 这个高可用方案是面向业务的立体化方案。通常说到高可用，大家首先想到的就是运维的各种保障，而当时的核心理念是“高可用的系统是设计出来的，不是靠运维保障出来的”，所以设计了如上图展示的多个方案组合起来的立体化方案。 这是整个游戏业务线，甚至是整个 UC，第一个真正实现异地多活架构的业务。 P9基于整体的架构思路给客户端和运维提出具体的要求，由各领域提出可选方案，然后一起讨论。能达成共识当然最好，如果达不成共识，那就主要由P9来拍板，P9自己参与的重点是在架构解耦和异地多活这部分的设计。 所谓的“整合跨领域的技术打造成熟作品”的核心要求就是具备一定的技术广度，能够结合作品来整合不同领域的技术，这也是 P9 阶段提升技术能力的关键。 该阶段技术详细要求 提升 首先，不要陷入到太细的技术细节中，比如某个工具的使用、API 如何调用等，因为这样做花费的时间太多，而且对于做关键技术决策并没有什么帮助。相反，你需要从宏观层面熟悉多个领域的技术，包括技术原理、优缺点、适应场景和业界应用等。 另外一个提升重点就是关注和学习新技术，比如人工智能、区块链和 VR/AR 等，因为新技术可能会给业务带来新的突破。 业务 按照规模和组织形式来区分，P9 负责的业务范围一般可以分为三类： 独立的一个或者一类产品 比如阿里云上的云数据库 Redis 版，或者云数据库 Redis 版 + 云数据库 MongoDB 版。 某个行业中的一个或者一类业务 比如美团 App 是一个覆盖“本地生活”行业的 App，里面会划分外卖、美食、酒店、电影等几十个具体的业务，一般 P9 会负责其中一个或者一类业务。 某个中台的一个或者一类业务域 比如电商中台可以分为支付域、订单域、商品域和用户域等几十个业务域，一般 P9 会负责其中一个或者一类业务域。 对业务的详细要求 关于业务战略的理论和方法论，如果想快速入门，可以学习宝洁战略模型。 管理 对管理的详细要求 P9 带团队的挑战在于，因为管理范围覆盖的领域比较多，你已经不可能在每一个具体领域都达到精通的水平了。 所以，你在管理 P8 的时候，需要尽量采用授权式管理。不过一定要注意，不要把授权式管理变成了放羊式管理。 有些 P9 因为自己曾经不是从某个专业领域升上来的，对这个领域不太熟悉，就干脆把这个领域的事情完全丢给一个 P8 了事。 但是这可能会导致在做关键的技术决策的时候出现脱节：P9 懂业务，但是对某个专业领域不熟悉，而 P8 虽然在专业领域上很精通，但是对业务的理解一般，无论谁来做决策，都存在很大风险。 跟 P8 相比，P9 因为要负责业务目标的制定和实现，所以需要在业务和管理投入更多的精力，而技术上投入的精力则稍微少一点。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/ppt/ppt_frame.html":{"url":"docs/ppt/ppt_frame.html","title":"PPT框架","keywords":"","body":"晋升ppt框架误区标准的晋升 PPT 框架第一部分: 自我介绍第二部分: 自述材料第三部分: 辅助内容晋升ppt框架 误区 晋升ppt的形式越炫酷越好 PPT 的漂亮和炫酷程度并不是关键，有时候反倒会成为累赘，因为评委可能会觉得你的 PPT 是“内容不够，形式来凑”。 晋升 PPT 列的事情越多越好 有些人在总结自己能力的时候，以为列的事情越多，就越能证明自己的能力很强，于是干脆把做过的事情全部罗列出来，逐个介绍。 罗列的太多， 评委无法判断哪些能力才是核心能力，产生一种“啥都会但又啥都不精”的感觉。 晋升 PPT 的内容越详细越好 这个误区有两种表现形式。 第一种是虽然页数少，但是每一页的内容特别多，密密麻麻的全是区块和文字，简直要把人逼出“密集恐惧症”。 站在评委的角度，不管是看你的 PPT，还是直接听你讲，都很难把握重点。你自以为讲了 7～8 个点，但是很可能他们听完以后只能记住 3～4 个点，而且也不知道其中最重要的点是什么。 第二种表现形式是虽然每一页内容相对少一些，但是页数很多，讲 PPT 的时候翻页翻得飞快。 站在评委的角度，他们无法把连续几页 PPT 的内容整合成某个主题相关的完整内容，可能看到后面就忘了前面。 标准的晋升 PPT 框架 结构清晰 比如用金字塔原理或思维导图来讲解思路，用时间线模型来讲解发展历程，用架构图来讲解系统，用流程图来讲解业务，用 UML 类图来讲解代码等。 重点突出 在 PPT 上，将核心内容提炼成 3～5 点，让评委能够快速理解你要讲的内容范围。无论是总体上要讲的事项还是每个事项的亮点，都应该遵循这个思路。 与实际讲述内容匹配 你要讲什么，PPT 就配合呈现什么，最忌讳的就是讲的内容和 PPT 内容不相符。 第一部分: 自我介绍 一是基本信息，也就是你的姓名、所在团队和业务、当前级别、申请晋升的级别等信息。通常情况下，我们都是逐级晋升。但也有跨级晋升的情况，这种情况在跨越式职级体系中比较罕见，而在阶梯式职级体系中，同级别内的跨级晋升还是比较常见的，所以你要注明一下。 二是当前职责，也就是你当前主要的职责，比如参与或负责哪块业务、是否带团队、团队规模多大、担任了什么关键岗位（比如项目负责人、系统 owner）等。 三是工作经历，也就是以前在哪里待过，做过哪些重要项目。 第二部分: 自述材料 第二部分是 10～15 页的自述材料，用来向评委展现自己能力。 自述材料总体的写作指导思想就是金字塔原理，围绕“我达到了 xx 级别的要求”这 1 个中心主题，设计 3～5 个核心论据，每个论据分为背景、任务、行动和结果 4 个部分展开。整个结构就像金字塔一样，中心明确，层次分明，逻辑清晰。 第三部分: 辅助内容 第三部分是 1～3 页的辅助内容 包括两部分: 一是自我总结，用能力矩阵或者区块的形式，把你的核心能力再提炼总结一下，让评委有一个整体的印象。 需要注意的是这里的提炼要和前面讲的内容呼应，不能前面重点讲了某项能力，结果在总结里面看不到了。同时需要注意的是核心能力 3～5 项最合适，不要列出来 10 项核心能力，这样就体现不出“核心”了。 二是发展规划，结合自己的发展目标（比如这次由 P6 晋升 P7 之后，还想继续晋升到 P8）、业务的发展趋势、自己的不足等情况，设定一个综合的发展方向和路径。 你可能会担心，把缺点也列出来，会不会导致评委给自己打低分呢？其实正好相反，这样做恰恰证明你对自己的能力有清晰的认知，并且对职业发展有长远的规划。 需要注意的是，列出来的一定是自己想清楚的缺点，不能为了列缺点而随便写几个凑数，因为评委有可能会真的对这部分也展开提问。 另外还有一点也需要注意，你欠缺的能力不能是目标级别的核心要求，而应该是更高的要求，不然就是自己打自己脸了。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/ppt/ppt_write.html":{"url":"docs/ppt/ppt_write.html","title":"PPT写作","keywords":"","body":"自述材料技巧技巧一: 把PPT当成提词器技巧二: 围绕能力要求提炼论据技巧三: 用STAR方法来描述论据自述材料 自述材料总体的写作指导思想就是金字塔原理。 顶部是中心主题，自述材料的中心主题很明确，就是向评委证明你的能力达到了目标级别的要求。 中间是论据，也就是你用来证明自己的能力确实达到要求的依据，常见的论据包括：你负责或者参与过的项目，你带过的团队，你负责的系统或者业务。 底部是 STAR，也就是 Situation（情景）、Task（任务）、Action（行动）和 Result（结果）4 个部分。 技巧 技巧一: 把PPT当成提词器 可能你会担心自己因为紧张而忘记要讲的内容，所以就干脆把要说的话全部贴在 PPT 上。这种做法有两大坏处一是满屏充斥的信息会把评委逼出“密集恐惧症”二是会让评委在潜意识里产生“浪费时间”的感觉 有效的做法是把 PPT 当成“提词器”，而不是讲话稿。换句话说，PPT 上面展示的内容不是给你念的，而是用来提示你要讲的内容范围的。 一方面是提示你自己，这一页 PPT 应该讲哪几个关键点，至于具体的详细内容，不用放上去，只需要从你的嘴说出来就行了。另一方面也是提示评委，告诉他们你将要讲什么，这样评委就能够快速收集自己头脑中跟这些内容相关的知识、技能和经验，一边听你讲，一边理解并形成初步判断。 技巧二: 围绕能力要求提炼论据 论据可以分为两类。 第一类是核心论据，和目标级别的能力要求强相关，并且能够让评委眼前一亮，一般需要提炼 3～5 项。 提炼核心论据是有套路的，可以根据 COMD 模型，根据目标级别的能力要求去找相关的复杂度高的工作。这些工作往往会有一些共同的特点，比如持续时间长、规模大、不确定性高、有一定挑战性或者创新性等，找起来并不难。 第二类是辅助论据，从侧面说明你的能力，起到锦上添花的作用，不用太多，只要 1～3 项就行。 一些常见的辅助论据包括参加业界技术大会（证明自己主动拓宽技术视野）、在业界技术大会上演讲（证明自己有一定的业界影响力）、发表文章、出版书籍、承担一些虚拟组织的组长（比如学习小组和交流小组）以及参与开源项目等 技巧三: 用STAR方法来描述论据 STAR方法具体介绍 Situation(场景) 首先是描述事情的背景。注意，不要把项目 Word 文档里的内容直接贴上去，而是应该提炼 1～3 条关键内容摘要。 比如某资讯类项目的背景是： 随着行业自媒体的发展，大量质量参差不齐的内容涌现，如何让优质内容快速到达目标用户成为一个很大的挑战。 提炼为： 自媒体内容推荐 不过在讲的时候，还是应该说“随着……挑战”那段比较长的话。 Task(任务) 其次是描述你在这件事情里面的角色和负责的任务。 这里要特别注意，不要把整个项目的任务写上去，因为评委关注的是“你在项目中发挥的作用”，而不是“整个项目有多牛逼”。 Action(行动) 你要讲清楚自己做了什么，展现了哪些能力，这是最关键的部分 不要把 Word 文档的内容直接贴到 PPT 上，PPT 只要展示你提炼的 3～5 个核心点就行了，其他内容得靠你自己讲出来。尽量用架构图、流程图、类图和思维导图等形式来展现，然后提炼几个关键内容用文字展现出来，其他详细内容自述的时候讲出来即可 PPT 上只要写“做了什么”，用不着写“为什么这么做”。因为评委肯定会在答辩环节问到这一点，而且跟你进行多次的交流探讨。但是你无法预知评委究竟会怎么问，自述时间又很宝贵，所以不可能提前把背后的思考过程全都写上。 Result(结果) 所有事情的结果都应该围绕效率、效果、质量和成本这 4 个维度进行量化评估。 量化评估原则 所谓量化评估，就是把要评估的内容转化成可以量化的数据来呈现 先有基数后有比例 比例数值要有基数说明，因为只有把基数和比例结合起来才能完整地评估结果。 用绝对值而不是相对值 比例数值要用绝对值而不是相对值，因为相对值很好的原因可能是之前做得太烂。 数值转换为\"钱\" 要将数值转换为\"钱\"。这里的钱可以是收入、支出、成本和人力等。 虚实结合例子: 分配页数的方法 自述材料的总页数是 10～15 页，所以单个论据建议不要超过 3 页，否则内容总量很容易超标。 一般情况下，你可以把背景、任务和结果放在第 1 页，然后把行动单独放在第 2 页；如果行动比较复杂，也可以分成 2 页，这样总页数就是 3 页。 如果某个论据真的特别牛逼，3 页确实不够，也一定不要超过 5 页。这 4～5 页 PPT 怎么分配呢？一般是背景和任务放第 1 页，行动放中间的几页，结果放最后的 1 页。 如果每个行动相对独立，没有什么关联，那么每个行动和对应的结果放在同一页来讲，这样能更方便地把行动和结果对应起来。 比如论据是 Android App 性能优化，行动 1 是优化内存，行动 2 是优化网络，那么优化内存的方法和结果放在同一页 PPT，优化网络的方法和结果放在另外一页 PPT。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/ppt/ppt_speak.html":{"url":"docs/ppt/ppt_speak.html","title":"PPT讲解","keywords":"","body":"PPT讲解经验一经验二经验三经验四常见疑问PPT讲解 经验一 做一个演讲者 要做一个演讲者，而不是一台复读机。也就是说，不要照着 PPT 念，而应该根据 PPT 上的关键词和语句，适当地展开说明。 讲的时候要结合 PPT 的布局，根据从左向右、从上往下的顺序。因为评委看 PPT 的时候是按照这个顺序来看的，你不要跳着来讲，不然会增加评委理解的负担。 经验二 有效页 1～3 分钟，总时间 20～30 分钟 可以根据这个时间参考值来合并或者拆分 PPT。如果某个有效页的讲解时间不到 1 分钟，可以合并到其他页；如果某个有效页的讲解时间超过 3 分钟，可以拆成 2 页。 根据这个总时间，我们就知道晋升 PPT 有效页的标准页数是 10～15 页，太多就需要裁剪，太少就需要补充。 经验三 自述What,答辩why 合理的做法是自述环节主要讲 What，也就是事实部分，我们做了什么；答辩环节再根据评委的问题来讲 Why，也就是这样做的原因，一般是你对技术原理的理解、你对业务的思考以及你过去总结的经验教训等。 STAR方法对应的what和why 经验四 无论多忙都要安排模拟面评 一种是自己试讲，你找一个会议室，打开 PPT 演示模式，试着讲几遍。试讲的时候要注意两点，一是要发出声音，不要在心里默念；二是计时，如果试讲的时候发现时间太长，就要调整 PPT 内容或者减少某些内容的讲解时间了。 另一种是内部模拟面评，协调部门内的高级别人员扮演评委的角色，对你进行一次模拟面评，流程和正式面评一样，你先在自述环节讲 PPT，然后在答辩环节回答问题。 内部模拟面评有三个好处： 你可以感受到面评的氛围，提前适应压力，等到了真正进行面评的时候就不会那么紧张了。 内部高级别人员曾经参加过晋升，甚至可能担任过评委，知道评委可能会关注哪些点，能够帮助你提前发现遗漏和疏忽的地方。 你也可以通过模拟面评发现 PPT 或者讲述内容中的一些错误。 常见疑问 注意事项 一是把相关材料整理到统一的地方，避免答辩的时候在电脑上到处找；二是答辩前给自己的笔记本电脑充满电，并且关掉无关的应用，保证电脑性能。 讲的时候突然卡住了怎么办 如果超过 3 秒你还没想起来，就不用想了，直接跳到后面能想起来的地方接着讲。关键是不要紧张，别搞得后面的内容也讲不好。 因为即使你卡住了没有讲，如果评委关注的话，后面的答辩环节还是会问的；如果评委不关注，那么不讲就更加没什么影响了。 讲的时候被评为打断了怎么办 这种情况说明评委觉得你太啰嗦了，没有讲出重点，比较浪费时间。所以你需要立刻调整讲法，对于还没有讲的页面，翻到之后不要急着开口，留 3 秒左右的时间想想，在这一页的内容里，评委想听的重点是什么。 当然，最好的方式是在内部模拟面评的时候就识别出来，提前规避掉“耗时太长，讲得太啰嗦”的问题，把 PPT 和自己讲述的内容调整到最佳状态。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/ppt/reply.html":{"url":"docs/ppt/reply.html","title":"答辩","keywords":"","body":"答辩技巧一What类问题How类问题Why类问题技巧二技巧三答辩 压力太大有时候真的会导致晋升失败。我想你可能也有过这样的经历，评委问到某个问题，你答不上来，感觉整个人就蒙了，甚至等到切换成别的问题的时候，你还没有回过神来。 提高抗压能力没什么诀窍，就是平时要多锻炼，比如内部模拟面评、给别人培训、向高级别的管理人员汇报以及在技术大会上做演讲等。 技巧一 明确问题类型,回答关键内容 不要急于回答，先明确问题属于哪种类型，想想评委的关注点是什么，然后整理这方面的关键内容，最后再组织语言开口回答。 常见的问题类型和它们对应的关注点和关键内容 What类问题 What 类问题关注的是结果，回答的关键内容是“做了什么事情 + 拿到什么结果”，其中事情部分最好用 3 句话能够描述清楚，结果部分尽量用数据来描述。 What 类问题问得比较少，因为大部分内容你已经在自述环节讲过了。评委问这类问题，一般是发现了你遗漏的内容，或者对某些细节感兴趣，希望更全面地了解一些信息。比如你在 PPT 里写了某个业务的日活数据，评委可能会进一步问月活和新用户留存等数据。 How类问题 How 类问题关注的是过程，回答的关键内容是“做事情的方法 + 实施的步骤”，其中方法部分要点出关键词，也就是评委提问的引子，而步骤部分要有逻辑，常见的时间逻辑、空间逻辑和业务逻辑等都可以。 比如你在晋升 PPT 里写的是“采用微服务重构系统”，并且给出了拆分前后的架构图，然后介绍说：“我们采用微服务的方法将原来耦合的业务系统拆分成 4 个微服务子系统……” 那么评委可能会问：“你们的微服务落地过程，具体是怎么做的？” 在这个例子中，方法部分的关键词就是微服务，步骤部分的逻辑则可以是业务优先级，按照优先级从低到高的顺序进行拆分，第一步拆分 A 服务，第二步拆分 B 服务，第三步拆分 C 服务，总共拆分成 4 个服务（原有服务 + A + B + C）。 然后，你再补充一下在拆分服务的过程中，你遇到了哪些挑战和困难，分别是怎么应对的，这样就回答得差不多了。 How 类问题比较常见，因为自述环节不会展示太多过程的信息。为了全面了解你的能力，对于一些比较复杂的事情，评委一般都会关注具体的落地步骤，以及落地过程中你具体负责了哪些工作，然后再针对这些工作进行考察。 如果你在 PPT 里已经将步骤列出来了，评委可能就会直接针对具体步骤进行考察。 通常情况下，How 类问题用 1～2 分钟来回答比较合适。 Why类问题 Why 类问题关注的是原因，回答的关键内容是“技术原理 + 思考过程”。具体来说，Why 类问题可以再继续细分。 第一类是技术相关的 Why 类问题，一般回答相关原理，包括技术理论、技术原则和技术方法论等，比如高可用的 CAP 理论、网络编程的多路复用、浏览器渲染原理等。 举个例子，评委如果问：“为什么 Netty 性能高？”你就需要回答和 Reactor 网络编程模式和零拷贝等原理相关的内容。 这类问题从回答技巧上说，比较简单。因为技术原理都是业界公认的，你能不能回答好，关键在于平时有没有积累，毕竟现场编也编不出来。 第二类是决策相关的 Why 类问题，一般回答决策背后的思考，包括分析过程、分析方法、分析框架和决策标准等。 举个例子，你做了一个创新的旅游业务，支持互助旅游。什么是互助旅游呢？就是你来我的城市，我带你玩；等到我去你的城市的时候，你再带我玩。在这个业务里，你选择了从大学生群体开始试点。 举个例子，你做了一个创新的旅游业务，支持互助旅游。什么是互助旅游呢？就是你来我的城市，我带你玩；等到我去你的城市的时候，你再带我玩。在这个业务里，你选择了从大学生群体开始试点。 评委如果问：“为什么你要从大学生群体开始试点呢？” 你就需要从大学生的特点、业务的目标和最终决策的标准等角度来回答这个问题。比如你可以这么说： “首先，目前中国的在校大学生，包括研究生在内，总共有 XX 万人，这是一个不小的规模，而且他们都有一定的消费能力。 “另外，大学生群体喜欢尝试新事物，学业压力没有高中那么强，有比较多的个人时间来探索世界，而他们的高中同学往往又分散在不同城市上大学，本身就有比较强的探望和旅游需求。 “总的来说，不论是从群体数量和消费能力考虑，还是从潜在需求方面考虑，大学生都满足我们的创新项目在初创期进行快速尝试和验证的要求，所以我们选择了大学生作为我们的业务试点用户。” 以上回答内容仅仅作为示例，可能并不完善。如果你是讲自己真正做的业务的话，只要你平时有这方面的思考和积累，其实是可以回答很多内容的。 第三类是综合类问题，跟技术和决策都有关系，你的回答既要包括原理，也要包括思考。 比如评委问：“为什么你们选择 Memcache，而不是 Redis？” 你既需要回答 Memcache 和 Redis 在技术上的核心差异，也需要回答在具体业务选择 Memcache 的原因。 那么你可以这样说：“我们的业务需要做文本和图片内容缓存，数据结构简单，但可能会出现几百 K 大小的缓存对象，在缓存内容比较大的时候，Redis 的单进程模式会存在多连接 IO 操作互相影响的问题，性能不如 Memcache 的多线程模式。” 通常情况下，Why 类问题也是用 1～2 分钟来回答比较合适。 技巧二 答不上来就想办法回到熟悉的领域 遇到不会的问题，正确的做法是，不要编、不要蒙，老老实实承认不会，然后引导评委关注自己其他的技能，回到自己熟悉的领域。因为晋升的时候，你根本不用着证明自己全知全能，只要向评委展示出你的核心能力就够了。 技巧三 答辩环节还可能出现的一种特殊情况，就是你和评委关于某个问题的答案产生了争执，谁也说服不了谁。 这个时候，千万不要继续吵下去。因为就算后来证明你是对的，在答辩环节跟评委争论也没有任何好处。 首先，大部分评委都会为了证明自己，不断地抓住这个问题跟你一直辩论下去，这样一来你就没有时间回答其他评委的问题，展示你的其他能力了。 其次，一般来说，评委的工作经验比你丰富，对技术的理解比你深刻，所以你出错的概率要高于评委出错的概率。 最后，就算最后证明你是对的，评委是错的，也不可能重新来一次答辩或者修改晋升结果，因为这样相当于直接打评委的脸，影响很不好。 所以如果遇到产生争执，你可以这样说：“这部分内容我可能还没有研究透彻，后面我自己再深入研究一下。” Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/study/guidance.html":{"url":"docs/study/guidance.html","title":"导学","keywords":"","body":"指导原则和关键问题关键问题指导原则找时间学什么怎么学保证效果组合使用指导原则和关键问题 关键问题 时间从哪里来？ 如果没有足够的时间投入，再好的理论也只是纸上谈兵。 学什么？ 找到正确的学习方向，明确了学习的目标，才能做到有的放矢。 怎么学？ 不同的学习目的应该有不同的学习方法，保证学习的投入产出比。 怎么保证学习效果？ 如何解决“学了用不上，学了就忘”两个常见影响学习效果的问题。 指导原则 10000小时定律 总的指导原则是 10000 小时定律，它是一个很出名的用于专业领域提升的理论，有大量的相关资料可以参考（例如《异类》《1 万小时天才理论》等），其核心思想是如果你想要在专业领域不断提升自己的能力，必须投入足够的时间。 找时间 海绵学习法 10000 小时可不短，相当于平均每天 3 小时，持续 10 年时间。 海绵学习法是一个时间管理方法，它可以让你轻松地挤出时间 学什么 三段分解法 三段分解法是制定学习目标和计划的方法，它基于职业等级体系，将 10000 小时逐级分解，最终落实到可以实施的各项学习行动。 怎么学 链式 & 环式 & 比较学习法 链式学习法适合提升技术深度，通过自顶向下逐步深入的方式，将关联技术逐一掌握。 比较学习法适合提升技术宽度，通过比较相似的知识或者技能，全面掌握单个领域的技术。 环式学习法适合提升技术广度，通过学习业务闭环流程中相关技术，全面掌握多个领域的技术。 保证效果 第一个常见困难是，如果平时不学，真正要用的时候又来不及临时学；但如果平时学了，可能要等很久才能在工作找到的实践机会，到时候技术可能都生疏了。 第二个常见的困难是，学完之后感觉学得不深，跟别人讨论的时候，或者在晋升答辩环节被问到的时候，就发现很多东西明明学过，却说不出个所以然来。 Play 学习法可以用来解决工作中暂时没有实践机会的问题，学以致“玩”，通过“玩耍”的方式来应用。 Teach 学习法可以用来解决学得不深的问题，教学相长，通过“教学”的方式来加深理解。 组合使用 第一步，无论你当前是什么级别，先用“三段分解法”来规划你的学习目标和计划。 第二步，使用“海绵学习法”来找到你可以用于学习的时间。 第三步，根据学习目标采取相应的学习方法 第四步，采用“Play & Teach 学习法”来加强效果。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/study/sponge_learning.html":{"url":"docs/study/sponge_learning.html","title":"海绵学习法","keywords":"","body":"10000 小时定律意味着什么？海绵学习法10000 小时定律意味着什么？ 成为专家需要 10 年 格拉德韦尔一直致力于把心理学实验、社会学研究，对古典音乐家、冰球运动员的统计调查改造成流畅、好懂的文字。在调查的基础上，他总结出了“一万小时定律”，他的研究显示，在任何领域取得成功的关键跟天分无关，只是练习的问题，需要练习1万小时——10年内，每周练习20小时，大概每天3小时。每天3小时的练习只是个平均数，在实际练习过程中，花费的时间可能不同。上世纪90年代初，瑞典心理学家安德斯·埃里克森在柏林音乐学院也做过调查，学小提琴的都大约从5岁开始练习，起初每个人都是每周练习两三个小时，但从8岁起，那些最优秀的学生练习时间最长，9岁时每周6小时，12岁8小时，14岁时16小时，直到20岁时每周30多小时，共1万小时。 “一万小时法则”在成功者身上很容易得到验证。作为电脑天才，比尔·盖茨13岁时有机会接触到世界上最早的一批电脑终端机，开始学习计算机编程，7年后他创建微软公司时，他已经连续练习了7年的程序设计，超过了1万小时。 如果我们把 10000 小时换算一下：平均一天投入 3 小时，一年投入 365 天，那么 10 年算下来就是 10950 小时。 所以，10000 小时定律意味着，成为某个领域的专家，需要花费 10 年时间。 5000 + 5000 不等于 10000 10000 小时定律所说的“成功”或者“成为专家”，是指在某一个领域，而不是所有领域一通百通。 所以专业聚焦对于 10000 小时定律的落地非常关键，如果你从 A 领域转行到 B 领域，而它们的差异又比较大的话，那么你分别在这两个领域投入的时间是不能累加的，相当于以前在 A 领域的积累被浪费掉了。 工作时间外也要主动提升 工作中的很多时间都是在做一些重复的事情，只是让已经掌握的技能变得更熟练而已，边际效益是越来越低的。所以，工作 1 个小时不等于学习 1 个小时。 如果你想要高效地提升自己，就必须不断地主动学习新的、复杂度更高的技能，等到工作中用得上的时候，抓住机会在实践的过程中练习，获得经验教训，进一步加深对技能的理解和掌握。如此循环往复，一步一步地提升自己的能力。 海绵学习法 海绵学习法的关键就是“挤时间”。它既不需要我们放弃所有的休闲娱乐，也不需要在累成狗的时候强行“打鸡血”逼着自己去学，而是让我们通过长期坚持的方式，达到“积少成多、聚沙成塔”的效果。 早晨 30 分钟 首先，我们可以把起床的闹钟提前 30 分钟，比如原来 07:30 的闹钟可以改为 07:00。不用担心提前 30 分钟起床会影响休息质量，习惯以后，早起 30 分钟不但不会影响一天的精力，甚至可能反而让人更有精神。 通勤 2 小时 你可以根据通勤方式选择对应不同的学习方式。如果做公共汽车或者自己开车上下班，可以听书籍和线上课程的音频；如果坐地铁，除了听音频，也可以看电子书和线上课程，要是有座位，还可以看纸质书。 上班第一个 30 分钟 刚到工位的第一个 30 分钟（或者开完晨会后的 30 分钟），这时候一般也没什么会议，也很少有人来打扰，大脑又是最活跃的时间，所以学习的效果非常好。 不用担心这 30 分钟会影响项目进度，一天当中总会有其他事情浪费 30 分钟以上的时间，比如不必要的会议、低效的沟通、玩手机摸鱼等。如果担心影响项目进度，你可以在别的事情上提高效率。 睡前 30 分钟 大部分人在睡前都会进行一些休闲娱乐活动来放松自己，比如玩游戏、追剧、看电影、刷短视频等。对于忙碌了一天的劳动者来说，适当的放松是必不可少的，我们不必完全放弃这些活动，只需要从中挤出 30 分钟就行了。 比如少玩 2 局王者荣耀，30 分钟就挤出来了，从整个赛季来看，完全不会影响你的段位；少看一集电视剧，也能够节省 30 分钟以上的时间；至于少刷 30 分钟的短视频，就更加没什么影响了。 周末 2 小时 大部分人周末都会安排一些耗时很长的活动，比如购物、逛街、聚会、看电影、旅游和睡懒觉等。只要你有意识地挤时间，很容易就能挤出 2 个小时，比如购物、逛街和聚会的时候控制时间、早点回去；减少一些“无效社交”的时间；旅游的时候做好时间规划；本来准备睡 10 小时懒觉，改为睡 9 小时…… 关键还是意志力 这些方法对你原来的工作和生活影响很小，但只要长期坚持，积累的时间规模和个人的成长速度都是非常可观的。 当然，这些方法仍然需要我们稍微克服一下人性的弱点，只是用不着“头悬梁锥刺股”这样夸张而已。但是如果你连少打一局游戏、少刷一集剧这样的意志力都没有，那么无论多么有效的方法对你来说都是没有意义的。 最重要的是意志力, 坚持做下去才是最重要的. Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/study/three_stage.html":{"url":"docs/study/three_stage.html","title":"三段分解法","keywords":"","body":"三段分解法第一段: 分解\"等级\"第二段: 分解\"技能\"第三段：分解“行动”三段分解法 第一段: 分解\"等级\" 第一段分解，是在当前状态和最终的目标状态之间，分解出中间的等级。 10 年成为大牛这个目标虽然比较长远比较宏大，但并不意味着在成为大牛之前，我们一直停留在菜鸟阶段原地踏步。在菜鸟和大牛之间，其实有几个关键的里程碑，这些里程碑就是中间的等级。 第二段: 分解\"技能\" 为了达到下一个等级的要求，你需要针对哪些技能做专项提升。 如果所在的公司目前没有成熟的职级体系，或者准备跳槽到某个心仪的公司，也可以采取一个取巧的方式来明确能力项差别，这就是直接查看公司的招聘要求。 专项提升某个技能的持续时间既不能太短，也不能太长，一般建议在 6 个月左右。 第三段：分解“行动” 第二段分解之后，我们得到了 6 个月左右的技能提升目标，接下来要做的，就是通过第三段分解，将技能提升目标分解为具体要做的事情，然后按照计划执行。 比如说你的二段目标是“提升 Linux 水平”。那么，怎样才能提升呢？你可以上网搜索（知乎是个好地方），也可以去问有经验的朋友，把二段目标细化为 1～2 个月的三段目标。 示例 1.5 个月：通读《UNIX 环境高级编程》 1.5 个月：通读《Linux 系统编程》 2 个月：通读《UNIX 网络编程 卷 1》 1 个月：Linux 常用命令实战，包括 tcpdump、ps 和 top 等 把 6 个月的技能提升目标进一步分解成 1～2 个月的具体行动目标之后，实施起来就简单多了。每 1～2 个月只需要专注做好一件事，每次完成后都很有成就感，既感觉自己的水平有了提升，又佩服自己能够坚持按计划完成任务。这样的双重激励让我更有动力去完成下一个目标。 在具体落地的时候，还需要进一步分解到周，比如下周看完某本书的哪几个章节。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/study/study_method.html":{"url":"docs/study/study_method.html","title":"链式&比较&环式学习法","keywords":"","body":"链式学习法链式学习法的步骤链式学习法优点比较学习法比较学习法的步骤比较学习法的优点环式学习法环式学习法的步骤提升业务重要性环式学习的优点链式学习法 链式学习法用来提升技术深度 知识链是环环相扣的, 环环相扣的方式很有讲究 第一种是自顶向下、层层关联，打通一项技术的领域分层。 第二种是由表及里、层层深入，打通一项技术的细节分层。 以 Netty 网络编程为例分层 领域分层 细节分层 链式学习法的步骤 第一步，就是要明确一项技术的深度可以分为哪些层。 具体来说，就是画出“领域分层图”和“细节分层图”。一开始你可能会觉得画不出来，这恰恰说明你对深度的理解还不够，而尝试画图本身就是一个梳理结构、强化认知的过程。 第二步就是要明确自己要学到哪一层。 第三步就是要明确每一层应该怎么学。 在领域分层图中，越往上越偏应用，实际工作中用得越多，越往下越偏原理（包括相关的工具和配置），实际工作中用得越少。所以总的原则是，在上层投入更多时间，更关注细节和熟练使用，在下层投入相对少的时间，更加关注原理和简单应用。 在细节分层图中，你需要详细地学习每一层。要注意的是，对于“实现源码”这一层，你不需要去掌握每一行源码，只要掌握关键源码就行了，也就是和设计原理以及设计方案相关的源码。 链式学习法优点 促使我们主动提升 采用链式学习法，你就会意识到，使用一项技术完成了工作，并不意味着你就完全掌握了这项技术。你还需要把刚刚自己用到的技术作为切入点，画出完整的领域分层图和细节分层图，然后逐一攻破，这样才能提升深度，达到精通水平。 将知识和技能系统化 明确知识和技能点之间的关联关系，有助于更好的理解和应用这些知识和技能。 比较学习法 比较学习法用来提升技术宽度 横向比较同一个领域中类似的技术，梳理它们异同，分析它们各自的优缺点和适用场景。 比较学习法的步骤 先用链式学习法掌握某个领域的一项技术，将这个领域的关键技术点整理成表格。 基于整理好的技术点，学习这个领域的另一项技术，将它们在技术点上的差异整理成思维导图。 找出差异较大的技术点，将背后的原理和对应用场景的影响整理成表格。 示例 以缓存领域的 Memcache 和 Redis 为例，说明一下比较学习法的用法。 先用链式学习法掌握 Memcache 技术，整理出缓存领域的 6 个关键技术点。 基于这 6 点快速掌握 Redis 技术，整理出 Memcache 和 Redis 在这些点上的差异。 找出差异较大的技术点，包括并发方案、数据结构、高可用和持久化，整理出它们背后的原理和对应用场景的影响。 比较学习法的优点 学得快 同一个领域的技术在功能上大都是类似的，区别往往在于实现方案和细节。所以当你掌握了一项技术之后，再去同一个领域的另一项技术，就不需要从 0 开始了，因为基础的部分你已经学会了，只要重点关注它们的差异点就能够快速掌握。 学的全 整理关键技术点和制作思维导图的过程，会促使你把一个领域的技术体系化，更全面、更系统地掌握这个领域。 学得深 从差异点到背后的原理再到应用场景的思考过程，会让你对技术的取舍之道理解得更深，在每一次技术选择时都能给出让人信服的理由。 环式学习法 环式学习法用来学习技术广度 环式学习法更加适合业务系统相关的技术人员，而不太适合中间件（数据库、缓存、消息队列和服务中心等）相关的的技术人员，因为中间件的技术更加专注于深度和宽度，和具体的业务关系不大，对技术广度的要求并不高。 技术上常见的闭环是功能环，代表某个功能的处理过程 示例 以一个简单的“用户登录”为例，如果它的实现方式是前端在手机 App 上用做登录页面，后端用了微服务架构来存储，那么就可以构建这样一个功能环 环式学习法的步骤 第一步，就是把闭环画出来 具体的画法是将完整的闭环分为几个关键的环节，然后标出每个环节的关键内容。 就拿“用户登录”这个功能环来说，它可以分为前端、客户端、网络层、机房入口、Nginx、用户中心、安全中心和数据中心，总共 8 个环节；每个环节又会涉及不同的技术，比如客户端涉及 JsBridge 和 OkHttp，用户中心涉及微服务、MySQL 和 Redis 等，总共涉及的技术有 18 项。 通过这么一个简单的功能环，你就可以看出技术广度的边界和范围；而且这些技术都是业务上实际用到的，你完全不用担心自己是没有目的地乱学。 第二步，就是由近及远，逐步攻克闭环上的各个节点。 就算是同一个闭环，不同领域的人学习顺序也是不同的。还是以用户登陆这个功能环为例，前端的人先需要学客户端的 JsBridge 和 OkHttp 等知识，然后再去学服务端相关的知识；而服务端用户中心的人，需要先学 Nginx 和安全中心相关的知识，之后再逐步扩展到客户端和前端。 通常来说，职业等级越高，技术广度的要求也越高，所以功能环上要求掌握的相关技术也越多。 对于单个技术，你还是需要用链式学习法来学习，但是因为数量太多，全部严格按照链式学习法的要求来学是不太现实的。我的建议是，可以先不去研究源码，只要学习接口设计、设计原理、设计方案这 3 层就行了；在合适的时候或者有时间的时候，可以看看核心源码加深理解。 提升业务重要性 不熟悉业务常见场景 讨论需求的时候，因为不懂业务，就算产品的业务需求不合理、实现代价很高，你也发现不了。结果到了设计甚至是编码阶段，你才发现自己做得累死累活，效果还不好。 处理线上故障的时候，因为不熟悉业务，只能被动接受别人的分析和推断，很容易背锅。 因为不熟悉业务，无法承担整体需求分析和方案设计这种任务，导致个人能力得不到锻炼，失去很多晋升机会。 用户登录业务环示例 环式学习的优点 培养全局视野 在画出完整闭环的过程中，你可以端到端地了解全流程涉及哪些系统或者模块，每个模块的关键技术是什么，从而培养出全局的视野和能力。 避免盲目地广撒网却捞不到鱼 环式学习法划定的范围是实际工作的闭环，能够形成一套有效的组合拳，而不是东一榔头西一棒槌的胡乱搭配，能够大大提升学习效率。所以你只要对照环来提升就可以了，不用再担心广撒网却捞不到鱼了。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/study/play_teach.html":{"url":"docs/study/play_teach.html","title":"play&teach","keywords":"","body":"Play学习法Teach学习法写作培训Play学习法 通过模拟实践中的场景来进行学习和训练。 主要分为三个步骤： 按照链式学习法的方式学习某项技术。 列举常见的场景，搭建模拟场景。 在模拟场景进行测试、体验和练习 \"不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。学至于行之而止矣\" 学以致用, 才能更好的记住和理解学到的知识. Teach学习法 通过教别人来提升自己。 教别人有两种方式 当面给别人进行培训 写成资料给别人阅读，比如书籍和在线课程。 写作 如果想写一篇技术文章，但是感觉不知道怎么写，那主要的原因不是不会写文章，而是还没有完整地掌握这个技术，不知道哪些是重点，不了解整个体系，对体系里面的各个部分的协作关系不清楚。 写作本身就是帮助我们学习和梳理的一个过程 写作对学习的帮助 第一个方面: 写作有助于系统地整理技术体系 当开始准备写作的时候，肯定需要思考整体的结构应该如何设计，而这个思考的过程其实就是整理技术体系的过程。 只有当脑海中形成了完整的技术体系，才能知道应该先讲什么，后讲什么；哪些是重点，哪些可以简单带过；是一篇文章讲完，还是讲一个系列。 第二个方面: 写作有助于了解细节 写作看起来只是把自己知道的东西用文字表达出来，但其实你在写作的时候大脑无时不刻都在思考： 这是什么意思？ 这样说对么？ 这里要给别人讲么？ 为什么要这么说？ 怎么样才能表达清楚？ 所以，写作可以让你主动思考各种细节，一旦发现有疑问的地方，就会停下来去查证和研究。 写作是需要投入不少时间的，如果每个技术都写作，那时间肯定不够用的，所以根据技术和自己工作的相关度，来选择性写作，对于强相关的核心技术，自己写文章来学；而对于弱相关的非核心技术，可以通过阅读资料来学习。 培训 写作的时候，没有时间要求，没有现场压力，一句没写好可以重写，今天写不出来可以等到明天再写 培训的时间是有限的，有现场压力，听众可能会提出各种意想不到的问题，所以培训对能力要求更高，但是锻炼效果也更好。 要完成一场培训，你需要写培训材料。培训材料的准备过程就是一个写作的过程，写 PPT 这类培训材料，跟写 Word 文档比起来，也更能够锻炼你的总结、归纳和提炼的能力。写作带给你的帮助，培训也可以提供。 培训需要在有限的时间内讲清楚一个主题，所以必须对这个主题掌握到一定的程度才可以做到，这就会强迫你去思考跟主题有关的各种信息和可能的问题； 培训过程中，会和听众进行各种交流，这些交流本身既能够促进对培训内容的理解，也能够锻炼临场反应能力。 学习内容平均保存率 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/how_do.html":{"url":"docs/do/how_do.html","title":"做事方法","keywords":"","body":"做事方法做事能力的判断做事方法做事方法 做事能力的判断 具备闭环思维 做事的时候不能只是完成任务了事，而是要从端到端的角度去思考和落地。 端到端的过程都可以分为事前规划、事中执行和事后总结三个阶段 有方法论指导 你做事的时候不只是靠经验教训的历史积累，还有一套系统的流程或者模板。 方法论的第一个优势在于，无论遇到什么情况，你都能取得比较好的结果，能够保证交付质量的下限。否则如果只凭经验，那么下次情况稍微发生一些变化，你就不适应了。 方法论的第二个优势在于，你的行为背后是有一套逻辑支撑的，而不是拍脑袋随便拍出来的，这样会更有说服力。 能拿到好的结果 做事方法 事前规划 OKR 规划法 英特尔提出、谷歌发扬光大的方法，通过合理地设定目标和分解关键成果来弥补 KPI 的缺陷，用于制定工作规划。 事中执行 3C 方案设计法 通过制定多个备选方案来系统地分析事情相关的方方面面，避免思维狭隘，用于设计合理的落地方案。 PDCA 执行法 美国人提出、日本人发扬光大的方法，通过四个环节的循环来把控执行过程，保证具体事项高效高质地落地，用于推进事情的执行。 5W 根因分析法 丰田集团提出的方法，又叫“丰田五问法”，通过五个为什么来深挖问题本质，用于分析根本原因。 5S 问题处理法 通过五个步骤来解决问题，化“危”为“机”，用于系统地处理问题。 事后总结 4D 总结法 通过四个维度来整理做事的收获，能够帮助你在完成任务后进一步全方位地提升自己的能力，用于事后总结。 金字塔汇报法 通过遵循四个原则来展示工作成果，从而更容易获得高级别管理人员的认可，用于事后汇报。 四线复盘法 通过四个角度来复盘重大问题，达到公平公正的处理效果，避免背锅和甩锅，用于重大问题发生后的复盘改进。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/okr.html":{"url":"docs/do/okr.html","title":"OKR规划法","keywords":"","body":"OKROKR的优势KPIOKROKR和KPI的区别OKR规划法阶段一:业务规划阶段二:团队规划OKR OKR的优势 KPI KPI 的英文全称是 Key Performance Indicator，意思是关键绩效指标。它把公司的目标自上而下地分解，并且通过相关的关键绩效指标来衡量实际的执行效果。 KPI的问题 只适合标准化的、目标稳定的工作 会给团队带来不好的风气 故意定低指标：几乎所有人都把指标定得比较低，因为这样容易实现。 只顾短期效益：追求眼前利益的风气蔓延，短期内难见效益的工作都受到轻视，比如质量检验和老化处理等。 一切只看指标：上司不把部下当有感情的人来对待，一切都用指标来衡量。 工作和考核本末倒置：绩效考核需要把各种工作量化，但是很多工作无法简单地量化，所以公司在绩效考核上花费了大量的精力和时间，而在真正的工作上却敷衍了事，本末倒置。 KPI的困惑 程序员的工作如何量化 技术团队如何体现工作贡献 有风险的工作谁愿意做 技术团队规划的常见角度 解决问题 比如解决版本延迟、线上 Bug 和团队成员士气不高等问题。 优化性能 比如提升开发效率和质量，比如将 App 的崩溃率从 0.5% 优化到 0.3% 引入新技术 比如引入 Flutter 来实现双端统一开发，引入机器学习来实现系统的某个功能。 从这些角度来做 KPI 规划，往往拿不到很好的绩效结果。主要原因在于，这些都是团队和技术的角度，没有结合业务目标，所以就算你做得很好，价值也不一定能体现出来。 OKR OKR 的英文全称是 Objectives and Key Results，意思是目标与关键成果。 为了解决 KPI 规划法的问题，英特尔公司创始人安迪·格鲁夫（Andy Grove）提出了另一种团队规划法，后来由约翰·杜尔（John Doerr）引入谷歌发扬光大。 实施步骤 首先，设定业务目标（Objectives），比如提升市场占有率。 然后，为每个目标设定关键结果（Key Results），也就是为了实现目标具体要做的事情，以及具体的标准，比如为了实现“提升市场占有率”这个目标，准备“请 XX 明星做代言人”“投入 100 亿做用户补贴”等。 OKR和KPI的区别 KPI 的关键词是 Indicators，而 OKR 的关键词是 Objectives。 KPI 关注的是数据指标，而 OKR 关注的是业务目标。 假如你是程序员，如果关注指标，你想到的是代码行数、bug 数和单元测试覆盖率；而如果关注目标，你想到的是解决产品的卡顿问题和实现精准推荐。 假如你是足球运动员，如果关注指标，你想到的是进球数、助攻数、跑动距离和比赛场次；而如果关注目标，你想到的是夺冠、四强和保级。 假如你是曹操专车的业务负责人，如果关注指标，你想到的是司机数量、订单数和乘客数；而如果关注目标，你想到的可能是让曹操专车成为网约车行业第二。 彼得·德鲁克在《管理的实践》这本书中说道：“并不是有了工作才有目标，而是相反，有了目标才能确定每个人的工作。所以企业的使命和任务，必须转化为目标。” KPI 让我们正确地做事，OKR 让我们做正确的事。 KPI 的要求是可以量化，而 OKR 的要求是可以衡量，有着微妙的不同。你可以用量化的数据来衡量，也可以用里程碑式的关键节点来衡量。 OKR规划法 用 OKR 做规划可以分为两个阶段。 第一个阶段是，业务负责人针对整条业务线做业务规划。 第二个阶段是，Team Leader 针对专业团队做团队规划。 阶段一:业务规划 第一步:聚焦业务目标 聚焦于最重要的事情，争取形成合力和突破 聚焦业务目标有两个难点 面对的环境和处理的信息本身就有很大的不确定性 不同的人制定规划的时候判断和选择的标准也是不同的 聚焦的目标可以是定性描述的，比如“提升用户满意度”，也可以是可衡量的，比如“市场占有率排名前三”，通常情况下不要求量化。因为 KR 中会有具体的数据描述，在目标中你只要把数据的意义提炼出来就行了。 第二步:分解关键结果 聚焦业务目标之后，第二步是分解关键结果，也就是 KR。对于每个目标，业务负责人都要提出 3～5 个 KR。 业务目标有没有实现，需要综合 3～5 个 KR 一起来判断。 阶段二:团队规划 第一步:对齐业务 OKR 下一级的 Team Leader 要对照上一级业务 OKR，看看自己的团队能够贡献什么价值和力量，从而让整个公司“心往一处想，劲往一处使”。 示例 假设现在业务规划的 OKR 是： O：总用户数达到行业第一KR1：新增用户数 2000 万KR2：投入资金不超过 1 亿KR3：新用户月留存率不低于 40% 首先，针对 KR1，技术团队能做的包括“降低 App 包大小”“SEO 优化”“开发某某新业务”和“开发小程序”等。 其次，针对 KR2，技术团队能做的不多，除非运营明确说“某个大渠道的 ROI 偏低，主要原因是包太大影响转化”，这时你就可以直接把解决问题作为团队的目标。 最后，针对 KR3，技术团队能做的包括“优化用户体验”“新用户连续签到奖励”和“新用户引导”等。 第二步:补充专业OKR 如果说对齐业务 OKR 是自上而下的传导，那么补充专业 OKR 就是自下而上的提炼。TL 要结合业务目标和团队情况，提出专业上的 OKR，和业务上的 OKR 共同组成团队完整的 OKR。 以技术团队为例，假设现在的业务系统问题比较多，团队成员要花很多时间来处理各种线上问题。 虽然因为团队成员的能力很强，所以最终这些问题没有对业务直接产生什么影响，但是站在整个团队角度来看，这会降低团队成员的工作效率和质量，长期这样就会影响正常的版本开发进度。 针对这种情况，TL 可能需要提炼一个专业目标：季度线上问题平均数量从 XX 减少到 YY。 这样的目标很难通过对齐得到，只能由技术团队自己提出来。 自上而下的传导需要很强的业务理解能力，而自下而上的提炼需要有很强的专业能力，这两种能力相辅相成，用 OKR 做团队规划的时候缺一不可。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/c3.html":{"url":"docs/do/c3.html","title":"3C方案设计法","keywords":"","body":"3C方案设计法三个阶段选出最终方案3C 方案设计法会耽误效率吗3C方案设计法 每次做事的时候都至少设计 3 个方案，然后选择最优的 1 个或者几个方案去执行 三个阶段选出最终方案 3C 方案设计法的使用过程可以分为三个阶段，每个阶段都能够从不同的角度帮助你完善思考，提升方案的说服力。 第一个阶段是预研阶段，你需要设计出 3～5 个备选方案。 这个过程会促使你思考多种可能性，避免思维狭隘错过了更好的方案；而研究不同方案的优缺点可以帮助你系统理解某个领域的知识和技能。 你可能并不一定能很快想出 3 个备选方案，这恰恰说明你对当前的领域或者事情还没有全面的理解和思考，你需要强迫自己一定要想出 3 个备选方案，这个探索的过程就是一个自我提升的过程。 第二个阶段是讨论阶段，你需要把备选方案向上级汇报，或者给其他人评审 这个过程会让其他人的信息、观点和疑问输入到你的大脑中，进一步全面完善你对每个方案的优缺点、依赖条件和所需资源的理解。 第三个阶段是决策阶段，你需要挑选出最终的方案 如果是互斥的方案，那么选出 1 个最优的落地就行了 如果是可以并行的方案，那么“3 选 2”或“5 选 3” 列出一些备选方案，只能说明你对领域有一定了解；选出合适的最终方案，才能说明你已经掌握了这个领域，能做到理论和实践相结合。 决策的过程会让你重新审视自己原来提出的方案，尤其是最初倾向的方案，帮助你发现方案的问题、理解的问题、乃至自己决策标准的问题。 3C 方案设计法会耽误效率吗 首先，虽然前期准备的时间变长了，但是做一件事的整体效率变高了。 其次，虽然负责人投入的精力变多了，但是整个团队的效率变高了。 1 个方案是陷阱，2 个方案是困境，3 个方案是选择 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/pdca.html":{"url":"docs/do/pdca.html","title":"PDCA执行法","keywords":"","body":"PDCA执行法计划(Plan)计划环节技巧执行(Do)检查(Check)行动(Act)PDCA执行法 PDCA 执行法，就是把事情的执行过程分成四个环节：计划（Plan）、执行（Do）、检查（Check）和行动（Act），从而把控执行过程，保证具体事项高效高质地落地。 PDCA流程图 使用 PDCA 执行法，意味着你要完成制定计划、拆解任务、协调资源、安排责任人和检查结果等工作，所以它比较适合“负责人”这个角色，比如 Team Leader、虚拟团队负责人和领域负责人等。 如果你平时只是执行具体的事项，现阶段还不需要用到 PDCA 执行法。 计划(Plan) 确定具体任务、阶段目标、时间节点和具体责任人。 把 OKR 定位成专门用来做规划的方法，把 PDCA 定位成专门用来做执行的方法。 OKR和PDCA对比 计划环节技巧 处理紧急的事情要长短结合 如果采取临时措施，虽然能够快速处理，但没有从根本上解决，后面还可能出现其他问题。 如果采取长远措施，虽然能够从根本上解决，但是投入很大，短期内无法快速落地。 正确的做法是长短结合，先快速解决表面的问题，避免损失，然后规划长期的方法，从根本上解决问题。 比如 Redis 出现未授权访问漏洞（通过公网可以访问 Redis），你可以先通过防火墙或者访问控制来应对，然后通过升级 Redis 到最新版本来彻底解决。 重要但不紧急的事情拆分多个小项目 拆分为多个小项目来落地，可以按照事情类别来拆分，也可以按照时间迭代来拆分。 学会利用上级的力量来协调资源 对于某些项目，一开始并不能明确需要投入的人力。作为负责人，你很可能在分析之后发现，需要的人力投入比最初预估的要多。 在自己团队人手不够、向其他团队TL借人沟通无果后可以找上级来协调 首先，上级人脉多，面子大，可以协调和安排的资源更多。 其次，有上级出面，对方团队也更乐意接受安排，因为他们知道这件事情做好了，上级会清楚他们团队的贡献。 另外，如果对方团队真的有困难安排不了，上级也帮你会想其他办法，就算实在想不到办法，至少他也知道了事情的困难。 执行(Do) 按照计划落地各项具体的活动. 比如技术人员完成方案设计、编码和测试等工作。 根据情况采取相应的管理风格 根据情况采取相应的管理风格，包括独裁式、民主式、专家式、教练式和授权式等 做好信息同步 及时同步信息。根据信息的不同，同步的方式也有差异 对于问题相关的信息，必须立即同步，在问题发生的第一时间、问题取得和得到解决的时候都要及时汇报，不要等到解决完了再汇报，更不要以为自己把问题搞定了就可以当作什么事情都没发生。 对于任务相关的信息，可以定期同步，比如通过周报、双周报或月报的形式来汇报就可以了。 如果有里程碑的事件，也需要及时同步。 检查(Check) 对照计划来检查实际执行结果，明确哪些符合预期、哪些不达预期、哪些超出预期以及存在什么问题等。 使用 5W 分析问题根因 行动(Act) 基于检查的结果，总结经验和教训，明确下一步需要采取的措施。 做好总结汇报 执行环节是同步信息，主要是问题、进展和重要的里程碑事件。 行动阶段是总结汇报，主要是结果是否符合计划的预期，能总结什么经验教训，后续是否需要采取什么措施。 每次最多挑选 3 个改进点落实到流程 不要想解决所有问题，而是关注可能重复发生的、影响很大的问题。建议每次总结的时候，最多挑选 3 条经验教训相关的改进点落实到流程。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/w5.html":{"url":"docs/do/w5.html","title":"5W根因分析法","keywords":"","body":"5W根因分析法业务分析技术学习管理改进注意事项5W根因分析法 大野耐一曾经举过这样一个例子： 问题 1：为什么机器停了？答：因为机器超载，保险丝烧断了。 问题 2：为什么机器会超载？答：因为轴承的润滑不足。 问题 3：为什么轴承会润滑不足？答：因为润滑泵失灵了。 问题 4：为什么润滑泵会失灵？答：因为它的轮轴耗损了。 问题 5：为什么润滑泵的轮轴会耗损？答：因为杂质跑到里面去了。 如果到了问题 1 就停止追问，那么工人的措施就是更换保险丝，一段时间后保险丝肯定还会烧断。 如果到了问题 4 就停止追问，那么工人的措施就是更换轮轴，一段时间后轮轴又会很快坏了。 只有当追问到了问题 5，才能找出停机的根本原因，这时工人的措施就是给润滑泵加上防杂质的滤网，从而彻底解决问题。 业务分析 技术学习 示例 深入理解了 Netty 网络高性能的核心原理 问题 1：为什么 Netty 网络处理性能高？ 答：因为 Netty 采用了 Reactor 模式 问题 2：为什么用了 Reactor 模式性能就高？ 答：因为 Reactor 模式是基于 IO 多路复用的事件驱动模式。 问题 3：为什么 IO 多路复用性能高？ 答：因为 IO 多路复用既不会像阻塞 IO 那样没有数据的时候挂起工作线程，也不需要像非阻塞 IO 那样轮询判断是否有数据。 问题 4：为什么 IO 多路复用既不需要挂起工作线程，也不需要轮询？ 答：因为 IO 多路复用可以在一个监控线程里面监控很多的连接，没有 IO 操作的时候只要挂起监控线程；只要其中有连接可以进行 IO 操作的时候，操作系统就会唤起监控线程进行处理。 问题 5：那还是会挂起监控线程啊，为什么这样做就性能高呢？ 答：首先，如果采取阻塞工作线程的方式，对于 Web 这样的系统，并发的连接可能几万十几万，如果每个连接开一个线程的话，系统性能支撑不了；而如果用线程池的话，因为线程被阻塞的时候是不能用来处理其他连接，会出现等待线程的问题。 其次，线上单个系统的工作线程数配置可以达到几百上千，这样数量的线程频繁切换会有性能问题，而单个监控线程切换的性能影响可以忽略不计。 第三，工作线程没有 IO 操作的时候可以做其他事情，能够大大提升系统的整体性能。 管理改进 示例 问题 1：为什么项目延迟了？ 答：因为要等测试环境进行测试。 问题 2：为什么要等测试环境？ 答：我们只有 2 套测试环境，2 套都已经用于另外两个项目了。 问题 3：为什么只有 2 套测试环境，不能搭建多套吗？ 答：现在没有机器用来搭测试环境了，而且我们有将近 20 个子系统，搭建一套可用的测试环境耗时可能要一周。 问题 4：为什么会没有机器，直接申请机器不就可以了？ 答：运维今年的预算用完了，不能购买新机器了。 问题 5：为什么一定要用新机器，测试环境对机器性能要求高吗？ 答：测试环境对机器性能要求不高，基本能跑就行。 问题 6：那为什么不找运维申请过保机器（使用超过 3 年的机器，即使没坏也要换掉）用来搭建测试环境？ 答：之前没想过这个方案。 注意事项 问题的数量不是关键，找到根本原因才是关键 最简单的提问方法就是：下一个问题是对上一个回答的进一步深入。 首先要明确问题本身 如果没有明确问题就开始问为什么，无论问题多么精彩都没有意义，甚至越精彩离题越远。 如果这些问题都不明确就开始进行根因分析，就很可能得出一大堆似是而非的原因和改进措施。 避免变成大型“撕逼”现场 在连续追问“为什么”的时候，如果双方没有对这个方法充分达成认识，被问的人很可能觉得你在挑战和质疑他，讨论的现场就会变成大型“撕逼”现场，最后闹得不欢而散。 所以在一开始的时候，就要先解释清楚，待会儿将采用 5W 根因分析法来探讨根本原因，避免挑起情绪对立，引发“撕逼”。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/s5.html":{"url":"docs/do/s5.html","title":"5S问题处理法","keywords":"","body":"5S问题处理法明确问题(Specify)拆解问题(Split)定位问题(Seek)解决问题(Solve)落地行动(Sort)5S问题处理法 明确问题(Specify) 在解决问题之前，先要明确问题。 拆解问题(Split) 对问题进行初步的分析，将大问题拆解为几个独立的子问题，然后再根据子问题的数量和规模，看看是否需要申请更多人力资源来一起参与问题处理。 拆解问题技巧 拆解出来的子问题数量 2～5 个，拆太多了就很难保证互相独立。 拆解出来的子问题尽量互相独立。 明确子问题负责人，组成工作组，定期向上汇报进展。 定位问题(Seek) 定位问题的技巧就是 5W 根因分析法 根本原因可能不止一个，在使用不同的追问线索可能找到不同的根本原因。 解决问题(Solve) 使用 3C 方案设计法 设计多个解决方案 落地行动(Sort) 做事要有重点，排好优先级，挑选优先级TOP N的事情做。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/d4.html":{"url":"docs/do/d4.html","title":"4D总结法","keywords":"","body":"4D总结法结果数据技术成长4D总结法 从结果、数据、技术和成长这 4 个维度（Dimension）来整理自己的做事收获 结果 这个维度重点关注的是事情带来的价值，不同类型的团队在结果价值方面表现会有一些差异。 业务开发团队 对于业务开发项目来说，从业务的维度总结是自然而然的 例如某个业务用户日活是多少。 对于技术优化方案来说，主要看技术方案给业务带来的价值是什么 例如高可用方案让业务 P1 故障从 5 次减少到 0 次。 对于管理措施来说，主要看管理措施带来的效率和质量的提升 例如同样的人员支撑了更多业务。 中间件开发团队 结果建议从系统的性能、可用性和成本等方面进行总结；如果中间件系统已经产品化（比如阿里云的 RDS 和 MQ），也可以从销售量或者流量等方面进行总结。 技术支撑团队 也就是运维和测试之类的部门，结果建议从质量、效率和成本方面进行总结。 数据 通过数据来描述结果的时候，不但要列出相关的数据，而且对于这些数据背后的含义也要有自己的理解，尤其是对数据的评价以及评价的标准。通过评价数据的方式，可以培养自己的业务思维和理解力。 比如，同样是将用户活跃率提升 5%，对于一个像微信这样成熟的业务来说是非常难得的；但对于一个新业务来说还远远不够；同样的道理，从 20% 提升到 25% 和从 90% 提升到 95%，含义也是完全不同的。 技术 对于技术人员来说，做完一个项目或者方案之后，技术上有哪些提升、学到了什么新的技术、对哪些技术有了更深或者更全面的理解等，都可以在总结的时候系统地梳理一下。 在事情做完后，统一地整理和总结一下经验教训，能够进一步提升技术深度。 成长 除了关注技术上的提升之外，还需要关注个人综合能力成长，也就是软实力提升，比如对业务的理解能力、项目组织能力、带领团队的能力、沟通能力和做事方法等。 随着做的项目越来越多，通过总结得到的业务理解信息和能力也越积越多，到了一定阶段就可以量变导致质变，业务理解能力大大提升。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/pyramid.html":{"url":"docs/do/pyramid.html","title":"金字塔汇报法","keywords":"","body":"金字塔汇报法金字塔原理金字塔四个原则结论先行自顶向下归类分组逻辑递进金字塔汇报法总体结论具体分析关键事项总结改进全局大图演进路径时间轴金字塔汇报法 总结主要是面向自己做梳理，更强调自己个人的贡献，以及事情的价值和细节；而汇报主要是面向领导做组织提炼，更看重团队整体的结果，以及事情的逻辑和关键 金字塔原理 金字塔原理是美国人巴巴拉·明托提出的一种关于思考逻辑的方法论。 核心思想是任何事情都可以归纳出一个中心思想，中心思想可由三至七个论点支持，每个论点可以由三至七个论据支撑，这样延伸下去，形状像一个金字塔，所以才叫金字塔原理。 金字塔四个原则 结论先行 先重要（结论）后次要（结论） 先全局后细节 先总体（结论）后细分（结论） 先论点后论据 先结论后原因 先结果后过程 如果时间有限，可以只讲口诀中需要先讲的内容，后讲的内容可以直接不讲 就算时间充足，口诀中后讲的内容也不要花太久，建议按照二八原则来分配时间，80% 的时间给先讲的内容，20% 的时间给后讲的内容。 自顶向下 采用自顶向下的结构来组织逻辑，用下层的信息来支撑上层的结论。 归类分组 将类似的论点或者论据抽象、归纳、提炼、总结成一组，最后形成 5 个左右的分组。 逻辑递进 保证同级别的内容具备逻辑关联，主要是一致性和顺序性。 一致性是指，同级别的内容必须属于同一逻辑范围。 比如苹果、香蕉、葡萄、菠萝都属于“水果”范围，而牛奶就不属于“水果”。 顺序性是指，同级别的内容是按照某种顺序排列的 比如北上广深四个城市，既可以按照地理位置从北到南排序，也可以按照 GDP 从大到小排序 金字塔汇报法 标准的汇报内容包括总体结论、具体分析、关键事项、总结改进四部分。 总体结论 从全局概括整体的工作或者项目情况，得出关键性的结论，让听众整体上知道做得怎么样，形成做得好、做的一般、不达预期或遇到很大困难等直观印象。 具体分析 对总体结论中的论据进一步阐述和分析，让别人相信论点的真实性和有效性。 这个部分同样按照金字塔原理来拆解，需要提供具体的数据和证据。 如果有做的不好的地方，需要做原因分析。 关键事项 介绍做过的关键事项的情况，比如某某项目的执行过程或者某某业务的推广行动和效果等。 这部分不需要使用金字塔原理，一般是通过全局大图、演进路径和时间轴等技巧来汇报。 总结改进 总结经验教训和后续改进措施 改进措施的数量也不要太多，一般可以分为“业务”“技术”和“管理”这几种类型，每种类型列 3～5 条 改进措施既可以基于前面的原因分析，也可以基于前瞻性来进行判断 全局大图 全局大图，它是用来展示整体情况的。 常见的类型有业务大图、技术大图和组织大图等。 整体结构 汇报涉及的领域整体上包含哪些组成部分，各部分的关系或者层级是怎样的，和其他领域的边界和关系是什么。整体结构是领域的完整形态，已经实现的和还没有实现的部分都要展示出来。通常情况下，业务大图和技术大图用分层结构展示，组织大图用组织结构展示。 个体状态 各个组成部分当前的状态，或者取得了什么成就。通常情况下，用不同的颜色来表示不同的状态。 示例 演进路径 用来展示个体的发展路径和当前所处阶段的。 这里的个体可以是一个独立的系统，一个业务，或者一个领域。 演进路径的核心内容就是各个演进阶段，每个阶段要能够用一个词加一句话高度概括，让别人一眼就能看出不同阶段的差异。通常情况下，演进路径一般用阶梯式的图来表达，寓意步步提升，越来越好。 示例 时间轴 时间轴，又叫时间线，它是来展示事情发生过程的。 时间轴的核心内容是时间维度相关的里程碑以及每个里程碑的关键事项或者进展，换句话说，时间轴中的节点应该都是里程碑式的，不要事无巨细地全部列上去。 示例 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/do/line4.html":{"url":"docs/do/line4.html","title":"四线复盘法","keywords":"","body":"四线复盘法问题复盘四线复盘法时间线问题链责任链改进线四线复盘法 问题复盘 技术人员主要参与的是线上问题复盘，比如业务或者系统出现了线上问题，在问题解决之后往往就会组织复盘。 问题复盘的意义就在于找到问题的原因然后加以改进，避免同样的问题反复出现，降低问题的发生的概率和影响。 四线复盘法 问题复盘的内容涵盖事实、分析、定责和改进4 个部分 讲清楚事实 事实是复盘的基础，如果连事实都没有讲清楚就开始分析、定责和改进，无异于搭建空中楼阁，做得再漂亮也是没有意义的。 全面且深入地分析 首先需要保证没有遗漏问题，其次需要深入分析问题根因，否则以后问题还是会以其他方式反复出现。 得出让各方心服口服的定责结论 需要有明确的定责标准，避免拍脑袋定责，或者按照级别和关系来定责。 制定可以落地的改进措施 避免提出一些虚头巴脑的措施，看起来高大上，实际上却不知道怎么落地，后续也无法跟踪。 四线复盘法，就是通过时间线、问题链、责任链和改进线这 4 条不同的线索来展开复盘，从而实现事实、分析、定责和改进这 4 个部分的目标。 时间线 为了讲清楚事实，要明确时间线，也就是问题发生的经过，包括问题发现、问题处理过程中采取的各种关键措施、问题恢复的时间和问题影响的结果等。 其中，时间信息非常关键，因为它能够反映出问题发现速度、各项措施执行时间和团队响应效率等指标。比如，运维重启 30 台机器花了 1 小时，通常情况下这种处理效率肯定是有问题的。 问题链 为了全面且深入的分析，我们要明确问题链，也就是问题的传导路径。 通常情况下，一个问题往往不是单一原因导致的，而是多个原因“碰巧”组合在一起所导致的，所以分析整个问题的传导路径，才能全面地了解产生问题的过程。 问题链的路径逻辑有两类：业务流程和项目流程。 业务流程是指，端到端的业务处理的过程，分析的对象是各个关联的系统。 项目流程是指，端到端的项目开发的过程，分析的对象是项目各个阶段相关的人员，比如开发、测试、产品和运维等。 一般先采用业务流程的逻辑将问题定位到单个系统，然后再针对单个系统采用项目流程的方式将问题定位到具体的人或者流程中的某个步骤。 责任链 为了得出让各方心服口服的定责结论，我们要明确责任链，也就是问题责任人之间的关系。 需要结合时间线中问题影响的结果、公司的故障定级标准和问题链的分析，最终确定哪些团队或个人应该承担责任，分别承担多大的责任，接受什么样的处罚。 之所以叫责任链，是因为一个问题的发生往往是整个流程上多个环节相关的人处理有问题，才会导致最终问题的发生。比如开发人员引入 bug，测试人员遗漏了测试，产品人员没有验收到，最终才会在上线后发现问题，这个环节中只要有一个环节把握住了，问题就不会发生。 改进线 为了制定可以落地的改进措施，我们要明确改进线，也就是问题的改进计划，包括具体措施、改进责任人和时间节点等。 改进计划的思路来源于两个方面：时间线和问题链，通过时间线找到问题处理过程中不合理和可以优化的地方；通过问题链找到具体需要解决的问题。 具体措施可以是流程上的调整（增加或删除流程步骤），技术上的手段（增加功能、优化系统）和团队方面的措施（学习、培训、奖惩机制）等。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/special/gr.html":{"url":"docs/special/gr.html","title":"导读","keywords":"","body":"导学为什么要懂业务为什么要懂管理如何提升管理能力导学 为什么要懂业务 对于技术人员 更好的理解需求 更好的设计方案 更好的做团队规划 为什么要懂管理 如果说理解业务才能创造更好的价值，那么学会管理才能创造更大的价值。 管理真正的作用其实是整合团队的力量，让团队突破单个个体的能力上限，创造出更大的价值。 如何提升管理能力 管理思维框架 管理四象限 可以用来帮助你快速从 0 到 1 地搭建自己的管理视野，明确自己在成为管理者之后要做什么。 管理五模式 以用来帮助你针对不同的场景选择相应的思路，从而达到更好的管理效果。 管理其实是一个很大的范畴，包括企业管理、行政管理、人力资源管理和团队管理等，技术人员需要学习的主要是团队管理。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/special/w5h1c8d1.html":{"url":"docs/special/w5h1c8d1.html","title":"5W1H8C1D分析法","keywords":"","body":"5W1H8C1D分析法5W1H8C1D5W1H8C1D分析法 用 5W1H+8C 的思路来分析和理解业务功能，并且在功能上线后熟悉运行数据（1D）。 5W 5W 指的是 5 个不同的英文单词：When（何时）、Where（何地）、Who（何人）、What（何事）、Why（何因），代表需求产生的背景和功能上线后的运行环境，类似于操作系统上下文（Context）的概念。 首先，客户需求背后的真正问题才是关键。 客户遇到问题之后，往往会基于自己的经验、理解和学识等给出一个解决方案，然后说这是他们的需求。 理想情况是客户非常在行，最好就是软件分析师出身的，能够清晰地分析问题并提出合理的解决方案作为需求。 但现实情况却往往不妙，很多客户对软件的理解可能仅仅停留在 Windows 或者微信上，甚至有些客户认为你会变魔法，只要他说一个“简单的”需求，你就能变出他想要的！ 所以，如果我们不主动挖掘需求背后的 5W，就算完美地实现了客户的需求，也可能没有真正解决客户的问题。 其次，理解需求背景有助于设计更好的方案。 需求背景会隐含很多需求相关的信息，而这些信息会影响我们的方案设计。 5个W都是什么? 第一个 W 是 When，代表和时间相关的信息 常见的有： 季节信息：春夏秋冬等。 日期信息：节日、假日等。 作息时间：白天、晚上、凌晨、早晨、上午、下午、晚上、深夜等。 第 2 个 W 是 Where，代表和地点相关的信息 常见的有： 国家、地区：不同的国家和地区有不同的文化、风俗、制度等。 室内、室外、街道。 建筑物。 交通工具，比如上下班做地铁，开车等。 第 3 个 W 是 Who，代表和参与者相关的信息 常见的参与者信息有： 投资者、管理者。 使用者、维护者。 监督者、评估者：包括政府机构、监管机构等。 交互者：与当前系统交互的其他系统。 第 4 个 W 是 What，代表客户想要的输出结果 比如一个文档、一份报告、一个图片、一个系统和一个产品等。一般情况下，这也是我们看到的最原始的需求。 第 5 个 W 是 Why，代表客户遇到的问题 问题是客户提出需求的驱动力，只要是客户觉得不爽的地方都属于问题的范围。 在这 5 个 W 中，Why 是最关键的，因为只有真正了解了客户提出需求的驱动力，才能真正解决客户的问题，而只有真正解决了客户的问题，那么客户才会真正满意。 5W关系图 1H H 代表 How，也就是如何，它和 5W 共同组成了 5W1H 分析法，又叫六何分析法。 在分析和理解业务的时候，How 不是指设计方案，而是指业务需求的处理逻辑。 8C 5W1H 关注的是需求的功能属性，而 8C 关注的是需求的质量属性。 需求最终是不是真正以合理地方式实现了，既要看功能属性是否满足需求，也要看质量属性是否符合要求，两者缺一不可！ 所以还需要加一些约束条件（Constraint），也就是我所说的 C。 性能 性能是指系统提供相应服务的效率，一般包括响应时间和吞吐量，是很多系统架构设计的关键约束条件之一。 成本 成本是指为了实现系统而需要付出的代价，也是很多系统架构设计的关键约束之一。 时间 时间是指客户要求的交付时间，它会影响项目的进度安排，从而会影响项目的设计方案。 技术 技术是指客户指定的技术。 可靠性 可靠性是指系统长时间正确运行的能力。 安全性 安全性是指对信息安全的保护能力。 合规性 合规性是指满足各种行业标准、法律法规、规范等，比如 3C、SOX、3GPP、ITUT 等。 兼容性 兼容性是指我们提供给客户的系统与客户其它已有的系统兼容的能力。 1D D 代表 Data，也就是数据，反映了业务上线之后的效果（Result）。 常见的 Data 包括两个方面： 一是业务效果，比如 DAU、MAU、活动参与人数、订单数、成交量、成交额和运营效率等。 二是系统效果，比如峰值 TPS、接口性能、响应时间、崩溃率、可用 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/special/aarrr.html":{"url":"docs/special/aarrr.html","title":"AARRR漏斗模型","keywords":"","body":"AARRR 漏斗模型AARRR漏斗模型获取(Acquisition)激活(Activation)留存(Retention)收益(Revenue)推荐(Refer)学习和使用技巧漏斗数据获取渠道AARRR 漏斗模型 AARRR漏斗模型 AARRR 这 5 个字母分别代表 Acquisition、Activation、Retention、Revenue 和 Refer 五个英文单词，它们分别对应用户生命周期中的 5 个重要环节：获取（Acquisition）、激活（Activation）、留存（Retention）、收益（Revenue）和推荐（Refer）。 获取(Acquisition) 获取环节首先要做的就是触达用户，直白来说就是让用户知道我们的产品，触达的路径就是我们通常听到的“渠道”，比如广告、社交推广、老用户推荐、主播推荐等手段。 不同的用户群体有不同的特点, 所以使用的聚到也有所不同. 触达用户后，吸引用户进入产品是获取环节的关键。举个最简单的例子，用户通过某种渠道看到你的 App 后，你要通过一些手段吸引用户下载 App 并打开 App 使用，比如设计有创意的海报、红包现金奖励和送礼品等。 激活(Activation) 需要把获取的用户转化为产品的真实用户。 简单来说，就是用户下载了你的 App 后，至少要打开 App 体验一下核心的业务。 留存(Retention) 需要把激活的用户转换为产品的长期用户，避免出现“用户来得快，走得也快”的现象。 收益(Revenue) 需要将留存的用户转换为收益，这样企业才能获取收入，毕竟绝大部分商业产品的最终目标是获得利润。 收益环节是对企业来说非常关键，因为它决定了企业能否在激烈的市场竞争环境下存活下来；而且用户产生付费行为的意愿高低，往往也是衡量产品是否满足用户需求的一个关键指标。 推荐(Refer) 需要通过\"以老带新\"的方式来实现用户增长 学习和使用技巧 业务相关的漏斗手段 第一个关键点是，掌握业务相关的常见的漏斗手段以及优缺点。 核心业务的漏斗数据 第二个关键点是，掌握核心业务的漏斗数据。 团队业务的详细漏斗数据 第三个关键点是，掌握和理解当前团队做的业务的详细漏斗数据。 对于某些复杂和庞大的业务体系来说，你可能只是负责其中一部分业务，不太可能负责所有的业务，所以你优先掌握自己所在团队做的这部分业务的漏斗数据。因为不管是平时工作还是晋升，这部分业务相关的知识和技能都是能很快产生作用的 竞争对手的漏斗 第四个关键点是，对比竞争对手的漏斗。 漏斗数据获取渠道 第一，对于数据来说，最方便的来源就是业务内的各种统计分析平台。除了资金相关的报表可能需要较高的权限外，大部分的业务数据基本上是申请一下权限你就可以看到了。 第二，对于业务的分析和总结来说，如果你是 P7 以上级别，就有机会参加内部的业务总结会议和规划会议，这些会议会对业务进行总结和分析。这是信息量最大的获取时机，因为这些业务的分析、总结、经验教训等都是高级别的负责人讨论后给出的最终结论，具备权威性和专业性。 第三，对于竞争对手的信息来说，公司内的行业分析、第三方的行业分析、上市公司的财报等，都是了解行业信息非常好的渠道。 第四，作为技术人员，提升业务理解和业务意识的一个有效手段是经常和产品运营人员聊聊。他们的专业领域里面有很多隐含的业务信息，聊天的时候他们也会谈很多对业务的理解和看法。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/special/pg.html":{"url":"docs/special/pg.html","title":"宝洁战略模型","keywords":"","body":"宝洁战略模型愿景和使命定位策略能力组织宝洁战略模型 宝洁战略模型的核心思想是，战略就是选择，包括想做什么、能做什么、要做什么和不做什么。这一系列的选择决定了企业的行动，企业的行动又决定了最终的业务结果，而如何做出更好的选择，选择的标准是什么，就是宝洁战略模型涵盖的内容 模型示意图 愿景和使命 愿景和使命，决定了企业要做的事情的范围和目标 愿景、使命，再加上和做事准则相关的价值观，它们就形成了企业的核心的指导思想。 愿景：你最终想成为什么？ 使命：你为别人带来什么价值？ 价值观：你做事的准则是什么？ 定位 定位，决定了企业决定进军哪类市场。 以宝洁的护肤品为例，可以分为高端、中端和低端市场，不同市场的目标消费者、定价策略、销售渠道和推广方式都不一样，不可能靠一款产品同时满足高中低三个市场所有消费者的需求，所以设计产品的时候必须要做出选择。 策略 策略，决定了企业采取何种方式和手段来赢得竞争。 策略是整个战略的核心，因为策略关注的是如何赢得竞争。 能力 能力，决定了企业是否能够真正将策略落地并取得结果。 策略的实施需要依靠企业的能力，如果企业不具备对应的能力，再好的策略也是镜中月水中花。 组织 组织，决定了企业的各个团队能否协同一致高效的落地策略。 组织是宝洁战略模型最后一环，但同时也是最容易被忽视的一环。通常情况下，高层管理团队制定战略（定位 + 策略），然后交给各个部门来展开行动。但是如果没有适合的流程、组织结构和衡量方法来进行支撑，执行的效率可能非常低，效果可能很差。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/special/quadrant4.html":{"url":"docs/special/quadrant4.html","title":"管理四象限","keywords":"","body":"管理四象限管事管人理事理人管理核心原则:要事优先管理四象限 从管理的手段和范围来进行拆解 手段有两类，管和理，范围有两个，人和事，它们组合就得到了四个象限。 “管”有一定的“强制”含义，可以形象的理解为从上往下压；“理”有一定的“辅助”含义，可以形象的理解为从下往上托，两个手段缺一不可。 “人”就是团队的成员，管理就是想方设法发挥出人最大的潜能；“事”就是团队要做的事情，管理就是想方设法带领团队为公司创造最大的价值，拿到更好的结果 模型 管事 管事包括三个部分，团队规划、团队执行和团队汇报。 团队规划 制定团队一定周期内的目标和主要事项 团队执行 将团队规划的事项落地，包括人力安排、时间安排、进度跟踪和问题处理等。 团队汇报 归纳总结团队的工作情况，将信息反馈给上级。 管人 管人包括三个部分：团队构建、团队运作和团队考核。 团队构建 如何打造符合业务发展需要的团队。 团队运作 通过制定团队的标准流程和奖惩机制等，让团队成员做事更加规范、更有效率。 团队考核 确定每个团队成员的绩效。 管理者需要在熟悉公司文化和制度的基础上，尽可能多地在平时的工作中了解下属的实际工作状态和内容，在考核时做到实事求是，基于事实判断 理事 理事包括三个部分，风险管理、问题处理和资源协调。 风险管理 提前识别可能出现的问题，并采取预防措施。 一类是核心人员流失，它导致很多重要工作无法开展，所以你需要提前培养核心人员的备份人员，搭建合理的团队梯度。 另一类是项目进度太紧，它导致质量低下、团队士气低下和团队摩擦增多等问题，你可以通过提前招聘、借调人员和据理力争修改项目计划或者项目范围等方式来应对。 问题处理 解决团队已经发生的各种问题，比如人员变动、团队成员之间有矛盾、项目延迟和线上出现严重事故等。 一方面要认识到出问题的必然性，力求不要出大问题，容忍部分小问题，认真地分析问题，谨慎地制定流程规范；另一方面要意识到自己是任何团队问题的第一责任人，你可以指出下属做的不足的地方，但不能把责任全部推给下属。 资源协调 申请各种团队需要的资源，比如申请多几台手机用于测试，申请新的服务器搭建环境，申请外包来临时支援项目等。 理人 理人包括三个部分，团队建设、团队培养、团队激励 团队建设 通过举行各种形式的活动来增强团队成员的团队意识和协作精神，让团队成员相互之间更加了解和信任，同时释放工作压力。 团队培养 通过各种手段提升团队成员的能力，让团队成员既能够更好的完成工作任务，也能够逐步晋升到更高的级别。 培养手段: 定向自主学习 管理者指定学习目标和计划，团队成员自主学习，到了计划的时间后进行检查。比如 TL 指定某几个团队成员在 3 个月内学习设计模式，然后让他们统一给团队做培训或分享。 培训 根据团队需要安排相关培训，包括业务培训、技术培训、晋升培训等。这种方式适合大部分团队成员。 以战代练 通过带着成员做或者授权成员负责某个事项，让对方在做事情的过程中边做边学，以战代练。这种方式适合培养团队核心人员，尤其是对于有晋升需求的骨干人员，应该优先安排对晋升有帮助的工作任务。 技术交流 提供一些技术交流的机会，让团队成员能够开拓技术视野，认识更多业界同行，提升自己的影响力，比如参加技术大会和技术交流会议等。这种方式适合培养团队核心人员 团队激励 激发团队成员的潜能和战斗力，让团队更有激情和效率。 管理核心原则:要事优先 结合业务和团队等现状，判断什么时候什么事情更重要，优先处理当前重要的事情。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/special/mode5.html":{"url":"docs/special/mode5.html","title":"管理五模式","keywords":"","body":"管理五模式管理模式管理模式对比管理五模式 第一，每个人的精力都是有限的。如果你什么事情都自己一肩挑，时间和精力上会顾不过来。 第二，没有人是全知全能的。就算你精力旺盛，也会遇到不擅长的事情。比如我就对吃喝玩乐不怎么在行，所以组织团队建设活动的能力就比较差。 第三，团队成员的认可度和积极性也很重要。就算你什么都能规划好，但具体工作还是要交给团队成员来执行，如果你的想法不能得到充分理解和积极响应，大家暗地里抵制其实也很容易。 所以，对于管理四象限涵盖的管理任务，管理者需要发挥团队成员的力量，调动他们的积极性，这样能够达到更好的管理效果。 管理模式 独裁式 管理者直接指定下属或团队的具体工作，包括做什么事、怎么做、什么时候做和输出什么结果等，全都一一明确，团队成员不能提出不同意见和方案 用一句话总结就是：“我来决定，你来执行。” 民主式 管理者组织团队成员针对某项工作进行讨论，然后和团队成员一起选出最终的方案。管理者的意见并不是优先级最高的，团队通常采用集体投票的方式来做决策。 用一句话总结就是：“我们讨论，我们决定。” 专家式 管理者作为某方面的专家，组织团队成员针对某项工作进行讨论，并由团队成员来做决策，选出最终的方案；管理者不参与决策，只是在讨论的过程中提供专业指导。 用一句话总结就是：“我们讨论，你们决定。” 教练式 管理者作为某方面的专家，组织团队成员针对某项工作进行讨论，然后自己做决策，选出最终的方案；团队成员不参与决策。有点类似于 NBA 球队安排战术的时候，球员可以参与讨论，但是最终拍板的是教练。 用一句话总结就是：“我们讨论，我来决定。” 授权式 管理者把某项工作全权授权给指定人员，由被授权者来做决策，管理者在任务执行过程中的关键节点进行监督，防止出现较大偏差。 用一句话总结就是：“你来决定，我来监督”。 放羊式 管理者把某项工作交给指定人员，然后就不管了，等到最终结果出来的时候可能会去了解一下。 用一句话总结就是：“你去做，我不管。” 管理模式对比 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/rank_comp.html":{"url":"docs/other/rank_comp.html","title":"各大厂职级对比","keywords":"","body":"阿里腾讯百度头条滴滴综合阿里 阿里级别 级别名称 管理级别 级别名称 职位要求 P5 工程师 NA NA 1.应届毕业生, 2. 毕业2年内社招 P6 高级工程师 M1 主管 1.本科工作2~5年, 2. 研究生工作0~3年 P7 技术专家 M2 经理 1.本科工作4~8年, 2. 研究生工作3~6年 P8 高级技术专家 M3 高级经理 1.本科工作7年以上, 2. 研究生工作5年以上 P9 资深技术专家 M4 总监 无年限要求, 业界专家 P10 研究员 M5 资深总监 无年限要求, 业界大牛 P11 高级研究员 M6 副总裁 无年限要求, 业界领军人物 腾讯 腾讯(旧) 职级名称 腾讯(新) 职级名称 对应阿里级别 T2.1 工程师 6 6级工程师 P5 T2.2 工程师 7 7级工程师 P5/P6 T2.3 工程师 8 8级工程师 P6 T3.1 高级工程师 9 9级工程师 P6/P7 T3.2 高级工程师 10 10级工程师 P7 T3.3 高级工程师 11 11级工程师 P8 T4.1 专家工程师 12 12级工程师 P9 T4.2 专家工程师 13 13级工程师 P9 T4.3 专家工程师 14 14级工程师 P9/P10 T5.1 资深专家工程师 15 15级工程师 P10/11 T5.2 资深专家工程师 15 15级工程师 P10/P11 百度 百度级别 百度界别名称 对应阿里级别 T4 高级工程师 P5 T5 资深工程师 P6 T6 技术专家 P7 T7 高级专家 P8 T8 资深专家 P9 T9 研究员 P10 T10 技术总监 P11 头条 头条级别 头条级别名称 对应阿里级别 1-1 初级工程师 P5 1-2 中级工程师 P5 2-1 资深研发 P6 2-2 资深研发 P7 3-1 team领导层 P7/P8 3-2 team领导层 P8/P9 4-1 部门领导层 P9/P10 4-2 部门领导层 P11 滴滴 滴滴级别 滴滴级别名称 对应阿里的级别 D5 工程师 P5 D6 高级工程师 P6 D7 资深工程师 P7 D8 专家工程师 P8 D9 高级专家工程师 P9 D10 首席工程师 P10 D11 杰出工程师 P11 综合 阿里 腾讯(旧) 腾讯(新) 百度 头条 滴滴 P5 T2.1, T2.2 6级, 7级 T4 1-1, 1-2 D5 P6 T2.2, T2.3, T3.1 7级, 8级, 9级 T5 2-1 D6 P7 T3.1, T3.2 9级, 10级 T6 2-2, 3-1 D7 P8 T3.3 11级 T7 3-1, 3-2 D8 P9 T4.1, 4.2 12级, 13级,14级 T8 3-2, 4-1 D9 P10 T4.3, T5.1, T5.2 14级, 15级 T9 4-1 D10 P11 T5.1, T5.2 15级 T10 4-2 D11 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/nominations.html":{"url":"docs/other/nominations.html","title":"提名词","keywords":"","body":"提名词提名词易错点提名词的三大写作要点提炼重点虚实结合条理分明提名词修改案例提名词 提名词易错点 罗列事项 将自己做的项目一个一个流水账式地列出来，以为列得越多越好 写的太虚 没有案例和项目说明 没有条理 所有的内容都挤在一段话里面，不能明显的看出有拿几个关键点，需要看材料的人费力去找。 画蛇添足 写一些跟目标级别几乎没有关联的内容 提名词的三大写作要点 提炼重点 抽象出 3～5 个和晋升强相关的关键能力点。 比如你是 Java 后台开发，想要晋升 P7，关键能力点就包括 Java 相关的能力、数据库设计的能力和业务的理解能力。相应地，提名词也应该围绕这些能力点来展开，不一定所有的点都面面俱到，但最关键的几个是必不可少的。 虚实结合 提炼出关键能力后，必须要给 1～2 个案例证明。 比如能力概括写的是“具备优秀的并发设计能力”，那接下来就应该写“负责设计 618 XX 活动，线上峰值 TPS 30K，单机 TPS 5K”。案例尽量用数据证明，这里的数据可以是业务数据和系统数据，也可以是团队规模的数据；如果实在不能用数据证明，那也要描述事项的关键点，比如“从 0 到 1 搭建系统”或者“负责 XX 系统演进的架构设计，完成 XX 系统从 1.0 到 2.0 的升级”之类的。 条理分明 通过排版让成果与亮点一目了然，不要让管理者费劲去找。 很多人在写材料的时候不喜欢换行，所有的内容挤在一起。这样就算内容写得再好，效果也大打折扣，因为这些材料一般都是通过表格汇总，放在一起来看的。对于一个 P8/P9 的管理者来说，他不是专门看某一个人的材料，而是在列表中同时看几十个人的材料，所以绝大部分都是扫读，不会逐字逐句去看。 提名词修改案例 反面教材 小明同学具备优秀的设计能力，承担过多个关键业务的设计和开发，是团队的核心骨干，熟练掌握 Java/Redis/MySQL 等系统，具备高并发系统设计经验，承担了多个关键项目的负责人。 修改后教材 小明同学具备优秀的设计能力，承担过多个关键业务的设计和开发，是团队的核心骨干，他的能力具体体现在以下三个方面： 优秀的设计能力 熟练掌握 Java/Redis/MySQL 等系统，具备高并发系统设计经验，其 19 年设计的 618 活动系统，线上峰值流量达到 TPS 20K； 熟练掌握业务 对业务很熟悉，负责 A 项目 /B 项目 /C 项目的需求分析、方案设计、代码实现，项目上线后运行稳定； 团队核心 能够承担关键任务的负责人，是 2019 年业务双十一的保障负责人，整个双十一活动流量峰值增长 10 倍，系统表现平稳，没有任何问题。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/ten_thousand_hours.html":{"url":"docs/other/ten_thousand_hours.html","title":"10000小时定律","keywords":"","body":"10000小时定律10000 小时定律的发展史布鲁姆：长期大量的练习艾利克森：10000 小时练习时间格拉德威尔：10000 小时定律10000 小时定律剖析互联网技术领域如何落地？没有伯乐怎么办技术变化太快怎么办20 小时学习法10000小时定律 10000 小时定律的发展史 在 10000 小时定律的发展过程中，一共有 3 个不得不提的关键人物，他们分别是本杰明·布鲁姆（Benjamin Bloom）教授，安德斯·艾利克森（Anders Ericsson）教授以及作家马尔科姆·格拉德威尔（Malcolm Gladwell）。 布鲁姆：长期大量的练习 布鲁姆是美国知名的教育心理学家，芝加哥大学的教授，在“教育目标分类”和“精通学习”这两个领域作出了很多贡献。 1985 年，他出版了一本书《如何培养天才》（Developing Talent in Young People），专门介绍怎么从青少年群体中发现天才。 他研究了来自多个职业领域的 120 个成功人士的童年，包括音乐会上演奏的钢琴家、精湛的雕刻师、奥运会游泳运动员、世界级的网球运动员、杰出的数学家、杰出的神经学家等，涵盖了科学、艺术、体育、医学和工程等多个领域，想确认到底有没有“预测孩子未来成就的指标”（比如最广为人知的“智商”）。 但是研究结论却推翻了这个想法，不存在这样普遍适用的指标，智商和孩子将来的成就没有直接关系。 既然如此，那些成功人士又是靠什么获得成就的呢？难道是完全随机的吗？也不是。研究发现，对于大多数成功人士来说，最重要的因素是家人的鼎力支持、长期大量的练习和专业老师的指导。 艾利克森：10000 小时练习时间 布鲁姆虽然没有研究出量化“长期”的方法，但是他的研究打开了一扇通往新领域的大门。于是很多学者开始跟进，其中美国佛罗里达州立大学的心理学教授艾利克森就发现了“10000 小时练习时间”这个现象。 艾利克森对柏林音乐学院的学生进行了研究。他让音乐教授根据潜力将小提琴学生分成三组，依次是顶尖小提琴家（Best） 、优秀小提琴家（Good）和音乐教师（Teachers），然后详细分析这三组学生之间水平差异的原因。结果他发现，只有练习时间这个因素是区分不同组的关键指标，顶尖小提琴家的练习时间比音乐教师多 3 倍。 后来，他又研究了中年专业小提琴演奏家（Professionals）年轻时的练习时间，同样发现了练习时间这个关键因素。 为了进一步证实结论，艾利克森又对钢琴演奏家进行了研究。这次他挑选了专业演奏家（Experts）和业余爱好者（Amateurs）进行对比，结果发现专业演奏家的练习时间是业务爱好者的 10 倍。 在这两组研究中，他都发现了 10000 小时这个数据，如下图所示。 1993 年，艾利克森把研究成果整理成了论文“The Role of Deliberate Practice in the Acquisition of Expert Performance”发表。这篇论文不但描述了详细的研究细节，还介绍了各种跟成功有关的研究和它们的分析框架。 格拉德威尔：10000 小时定律 加拿大作家格拉德威尔根据艾利克森的论文结论，提炼出了“10000 小时定律”，也就是说，要想成功就必须要有 10000 小时的投入。 他分析了很多成功案例来证明“10000 小时定律”的普适性，比如甲壳虫乐队走红前在德国汉堡的酒吧中演出超过 10000 个小时，Sun 公司创始人比尔·乔伊的编程时间超过 10000 小时，微软公司创始人比尔·盖茨的编程时间也超过 10000 小时，音乐神童莫扎特真正成才前的作曲时间超过 10000 小时等等。 2008 年，格拉德威尔把他的观点写进了新书《异类：不一样的成功启示录》（Outliers: The Story of Success，以下简称《异类》）。这本书上架以后，雄踞《纽约时报》排行榜榜首 20 个星期，半年时间北美销售量超过了 100 万册，从此“10000 小时定律”广为人知。 10000 小时定律剖析 无论是格拉德威尔还是艾利克森，都没有说过“只要练习 10000 小时就一定可以成功”。格拉德威尔《异类》中也探讨了很多和成功相关的因素，包括环境、文化和时机等；艾利克森在论文中也分析了家庭和个人等因素对成功的影响。 把 10000 小时定律理解为成功必要条件，而不是充分条件。换句话说，没有 10000 小时的投入，很难成为专家，但有 10000 小时投入，也不一定能成为专家！ 要想通过 10000 小时的练习成为专家，还有几个关键的因素也不能忽略。美国作家丹尼尔·科伊尔的《一万小时天才理论》这本书就做了很好的总结：精深练习、激情、伯乐三个因素是 10000 小时定律的关键。 精深练习 你需要设定努力的目标，然后挑战自己的能力极限，不断地重复练习更高要求的技能才能提升自己。写 10000 小时“Hello world”不会让你成为编程高手，唱 10000 小时《两只老虎》也不会让你成为周杰伦。 激情 10 年 10000 小时的持续投入并不是小菜一碟，而是一项非常大的挑战，靠外力的强制或者自我意志力来强迫达成是不可能的，必须要有个人的激情作为持续投入的动力。所以你自己要喜欢这件事情，能够从中感受到快乐和满足。 伯乐 每个领域都有大量的经验教训积累，单纯靠学员去试错来找到所有这些经验和教训是不可能的，需要有伯乐对学员进行观察，然后指出需要改正的地方和练习的方法，这样学员才能够快速提升。 10000 小时理论图示 互联网技术领域如何落地？ 没有伯乐怎么办 第一种方法是在团队内部找导师，不一定是主管，同事中的高手也可以。在代码 Review、设计评审和方案讨论的时候，拉上导师一起参与，给你提建议。 第二种方法是看书和学习线上课程。书籍和课程都是作者对知识和技能的一次梳理与整合，对经验和教训的一次总结和传承，所以购买一本书或者一门课就相当于请了一个教练，虽然它不能提供实时和具体的指导，但是我们可以通过它来详细地了解一个领域。 第三种方法是参加行业会议。行业会议会邀请行业内的专家来进行分享，每个分享主题也都是很有价值的经验总结，对你的提升具有指导意义。 第四种方法是参加线下的训练营。现在有一些机构开始尝试线下的训练营模式，邀请行业内的优秀人才作为导师，针对某个主题，集中进行一段时间的强化训练来提升学员的能力。训练营的模式和运动员教练很类似，能够实时地对学员进行指导，效果是最好的，但时间成本和资金成本也是最高的。 技术变化太快怎么办 跟传统领域相比，互联网行业的技术更新换代要快得多，比如最近 10 年影响比较大的新技术就有大数据、App 开发、微服务、容器化和人工智能等；而且各个细分领域的技术变化也很多，典型的就是前端开发，包括 jQuery、HTML5、Node 和 Vue/Reactor/Angular 等。 技术的快速变化确实会导致之前的一部分技术积累在新的环境下失去了原有的作用，比如现在我们很少用 Flash 来做开发了，但这并不意味着我们之前在领域的积累完全归零。 首先，很多基础的技术是不会频繁变化的，比如操作系统、数据库、浏览器、网络等。比如虽然 iOS 和 Android 开发是最近十几年才兴起的，但它们的基础仍然是操作系统、计算机网络和编程语言这些“老”技术。 其次，新技术往往是在老的技术基础上进化出来的，它们的目的是更好地解决老技术的问题。比如 jQuery 是为了解决 JavaScript DOM 编程太复杂的问题而设计出来的，Vue/Reactor/Angular 等前端框架又是为了解决大型项目中使用 jQuery 所导致的难以维护和协同的问题而设计出来的。 所以技术的变化不但不会让我们之前的积累失去价值，反而还会让我们之前的积累更有价值。绝大部分新技术的出现，都是业界顶尖的公司或者专家，结合他们以往的经验，再发挥他们天才的灵感才创造出来的。如果没有足够的经验积累，也就无法推陈出新。 20 小时学习法 10000 小时定律关注的是怎么成为顶尖的领域专家，比如小提琴家和钢琴家等。但是无论在日常生活还是工作中，我们都不可能在每个领域都成为专家，更多的时候只是想熟练掌握一门技能而已。 比如我们大部分人学开车，只是为了上下班通勤、节假日旅游或者当司机赚钱，而不是成为 F1 赛车手；大部分技术人员学习 Redis，也只是为了学习原理，方便在项目中使用，而不是想成为 Redis 的开发者。 美国学者乔希·考夫曼（Josh Kaufman）在《关键 20 小时，快速学会任何技能！》（The First 20 Hours: How to Learn Anything... Fast!）这本书中指出：如果学习目的不是“学精”（成为专家甚至大师），而只是“学会”（知道怎么用），那么只要花 20 小时，就可以快速掌握一项新技能。 考夫曼并没有否定 10000 小时定律，而是指出针对不同的目标应该采取不同的方式，不要一概而论，如果全都套用 10000 小时定律，时间和精力肯定都不够用。 分解步骤 把技能最大程度地细分，分成若干小步骤。 充分学习 基于分解步骤得到的小步骤，逐一练习。 克服困难 克服练习过程中的各种困难，包括生理、心理、情绪、工具、环境等。 集中练习 至少用 20 小时集中学习最重要的小步骤。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/study_base.html":{"url":"docs/other/study_base.html","title":"学习基础技术","keywords":"","body":"学习基础技术细化基础范围判断学习深度如何让理解更深入学习基础技术 要想打好基础能力，首先要明确什么才是真正的“基础能力”。 基础能力是指工作任务相关的基础能力，不是整个计算机技术的基础能力，核心就是“工作相关” 细化基础范围 明确了“工作相关”这个原则之后，提升基础的第一步，就是使用技能图谱的方式，从以下 4 个维度来细化基础能力的范围。 工具 工作中常用的工具，比如 IDE、编程语言、问题定位工具和版本管理工具等。 生态 系统或者产品运行时依赖的所有组件或者系统，比如第三方库、中间件、数据库、文件系统和游戏引擎等。 容器 系统或者产品在哪里运行，比如 Android、iOS、Linux、浏览器和云服务器等。 原理 需要掌握的原理知识，常见的有计算机网络会让数据结构等。 判断学习深度 数据结构和算法 对于绝大部分开发人员来说，主要是熟悉数据结构和算法的原理、优缺点与应用场景，还有自己所用的编程语言提供的算法和数据结构。 而对于中间件开发的技术人员来说，在做极致的性能优化的时候，就需要掌握算法的原理和代码实现细节了。 计算机网络 对于绝大部分开发人员来说，能够熟练掌握抓包工具抓取 TCP/IP 包，并且能够看懂包信息，定位网络问题就行了。 而对于运维人员来说，抓包、路由协议、组网配置等就需要深入掌握了。 操作系统 对于绝大部分开发人员来说，掌握基本的操作系统原理和概念，能够使用操作系统提供的工具来定位程序问题就行了。 而对于驱动开发、内核模块开发的技术人员来说，操作系统原理、实现机制和代码都需要深入掌握。 如何让理解更深入 通过领域分层将基础技术和顶层的实用技术关联起来，形成系统化的理解，这样能够理解得更深，记得更牢固。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "}}