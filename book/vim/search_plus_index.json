{"./":{"url":"./","title":"前言","keywords":"","body":"前言前言 vim 操作命令大全 好用 vim 插件配置 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/install/install.html":{"url":"docs/install/install.html","title":"vim安装","keywords":"","body":"安装vimCentos 安装vim步骤Ubuntu18.04.2安装vim安装vim 非常建议vim版本升级到vim8.2及其以上，因为很多插件对旧版本支持不是很好（如果用插件的话）git最好使用最新的，要不然可能会有很多坑。 Centos 安装vim步骤 删除旧版本 yum list installed | grep -i vim 可能会看到下面几个 vim-common.x86_64 vim-enhanced.x86_64 vim-filesystem.x86_64 vim-minimal.x86_64 千万不要删除vim-minimal.x86_64，sudo的功能依赖于他 sudo yum remove vim-common vim-enhanced vim-filesystem 安装依赖 这里安装了git，但是很可能不是最新的，如果版本过低，可能不支持分支拉去在插件安装时。 sudo yum install gcc make ncurses ncurses-devel sudo yum install ctags git tcl-devel ruby ruby-devel lua lua-devel luajit luajit-devel python python-devel perl perl-devel perl-ExtUtils-ParseXS perl-ExtUtils-XSpp perl-ExtUtils-CBuilder perl-ExtUtils-Embed 拉取vim源码 git clone https://github.com/vim/vim.git 安装三部曲 cd vim/ ./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --enable-perlinterp enable-luainterp --enable-gui=no sudo make && make install 确认检查(查看vim版本) vim --version | head -1 Ubuntu18.04.2安装vim 查看ubuntu版本 cat /etc/issue 添加vim源 sudo add-apt-repository ppa:jonathonf/vim apt-get update 安装vim sudo apt install vim Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/mode.html":{"url":"docs/cmd/mode.html","title":"vim的模式","keywords":"","body":"vim的模式正常模式插入模式命令模式可视模式替换模式虚拟替换模式vim的模式 常用模式有 正常模式、插入模式、命令模式和可视模式。 正常模式 vim的很多操作命令大多是在正常模式下进行的。这是一个很重要也很难的模式。正常进入vim就是正常模式在其他模式中点esc进入正常模式其他模式基本都是在正常模式下输入特定的命令进入的。 插入模式 进入插入模式命令有如下几种:i, I, A, a, o, O, c等 命令模式 在正常模式下输入 : 进入命令模式 可视模式 v 或 V 命令是行可是模式,V是当前行整行，v是当前行光标位置开始 \\ 命令可以进入块可视模式 gv 命令可以重选上次高亮区域可视模式下, 可用 o 来更换两端的活动端.可视模式下, 可以用U把选中的转换成大写, u可以把选中的转换成小写 替换模式 R 命令可以进入替换模式 虚拟替换模式 虚拟替换模式会把原先的tab键当做4个空格替换 gR 命令可以进入虚拟替换模式 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/base.html":{"url":"docs/cmd/base.html","title":"基本命令","keywords":"","body":"基本操作保存和退出编辑插入其他基本操作 保存和退出 :w 保存当前文件 :q 退出vim :wq 保存退出 :w! 强制保存当前文件 :q! 强制退出(可以忽略修改) 编辑插入 i 在光标前进入插入模式 I 在当前行行首进入插入模式 a 在光标后进入插入模式 A 在当前行行尾进入插入模式 o 在当前行的下一行新开一行进入插入模式 O 在当前行的上一行新开一行进入插入模式 r 替换光标下的字符进入插入模式 s 删除光标下字符并进入插入模式 S 删除当前行并进入插入模式 其他 :!cmd 执行shell命令cmd :n1,n2 w!cmd 将文件中第n1行至n2行的内容作为cmd输入并执行, 若不指定n1,n2, 则表示将整个文件内容作为cmd的输入 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/move.html":{"url":"docs/cmd/move.html","title":"移动命令","keywords":"","body":"移动光标命令一般移动单词移动块移动跳跃移动屏幕内移动行内移动翻页行位置指定移动光标命令 一般移动 不加n默认n为1 nh 向左移n个字符 nl 向右移n个字符 nk 向上移n行 nj 向下移n行 gk 向上移动一个屏幕行 gj 向下移动一个屏幕行 space 右移一个字符 backspace 左移一个字符 ctrl + e 向上滚动一行 ctrl + y 向下滚动一行 单词移动 nw(W) 向右移动n个单词至词首 nb(B) 向左移动n个单词至词首 ne(E) 向右移动n个单词至词尾 nge(E) 向左移动n个单词至词尾 nG 移动到当前光标行的第n列 小写: 符号分隔的为一个单词大写: 空格分隔的为一个单词不加n默认n为1 块移动 ) 移动至句尾 ( 移动至句首 { 移动上一个空行 } 移动下一个空行 跳跃移动 gg 移动至文件第一行 G 移动至文件最后一行 nG 移动至第n行 n+ 向下移n行 n- 向上移n行 % 在成对的符号间跳转 成对符号: '(', '[', '{', ''', '\"', '`' 屏幕内移动 H 移至屏幕顶行 M 移至屏幕中间行 L 移至屏幕底行 行内移动 0 移至当前行首 $ 移至当前行尾 ^ 移至当前行第一个非空白字符 命令前面加 g 表示以屏幕行操作 翻页 ctrl + f 向下翻一页 ctrl + b 向上翻一页 ctrl + d 向下翻半页 ctrl + u 向上翻半页 行位置指定 nzt 将第n行移至屏幕顶部 nzz 将第n行移至屏幕中间 nzb 将第n行移至屏幕底部 不指定n时, 默认移动当前行 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/search.html":{"url":"docs/cmd/search.html","title":"搜索命令","keywords":"","body":"搜索命令搜索命令 * 读取光标处的字符串, 并且移动光标到它再次出现的地方.(正向) # 读取光标处的字符串, 并且移动光标到它再次出现的地方.(反向) /pattern 从光标处向下搜索pattern ?pattern 从光标处向上搜索pattern n 在同方向重复上一次搜索命令 N 在反方向重复上一次搜索命令 fc 在光标位置向右搜索字符c Fc 在光标位置向左搜索字符c tc 在光标位置向右搜索字符c, 并把光标移动到目标字符左边一个位置 Tc 在光标位置向左搜索字符c, 并把光标移动到目标字符右边一个位置 ; 同方向重复上次搜索字符命令 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/replace.html":{"url":"docs/cmd/replace.html","title":"替换命令","keywords":"","body":"替换命令替换命令 :s/p1/p2/g 将当前行中所有p1均用p2替换 :n1,n2s/p1/p2/g 将第n1行至第n2行中所有p1均用p2替换 :g/p1/s//p2/g 将文件中所有p1均用p2替换 不加g时, 只替换匹配到行的第一个匹配项 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/copy_delete.html":{"url":"docs/cmd/copy_delete.html","title":"拷贝和删除命令","keywords":"","body":"拷贝/删除拷贝/删除 nyy 从当前行开始向下复制n行 ndd 将当前行及其以下共n行内容删除, 并将删除内容放到1号删除寄存器中. p 粘贴(从光标位置向后) P 粘贴(从光标位置向前) 不加n表示复制(删除)一行(单词) yi配对符号 复制配对符号间的内容 di配对符号 删除配对符号间的内容 ya配对符号 复制配对符号间的内容, 包括配对符号 da配对符号 删除配对符号间的内容, 包括配对符号 配对符号: '(', '[', '{', 'd(删除), y(复制)可以与移动命令组合使用例如 ynw 复制光标位置向右n个单词. ynj 复制当前行至向下n行. dnk 删除当前行至向上n行 :n1,n2 co n3 将第n1行至第n2行的内容拷贝到第n3行下面 :n1,n2 m n3 将第n1行至第n2行的内容移动到第n3行下面 :n1,n2 d 将第n1行至第n2行的内容删除 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/sp.html":{"url":"docs/cmd/sp.html","title":"小操作","keywords":"","body":"小操作小操作 :%!xxd 以16进制查看文件 :%!xxd -c num 以16进制查看文件,每行显示num个字节 %!xxd -r 返回原来的格式 %!od k 转换成16进制查看, 但是不易看懂. :ps/string/&/gn 查看string出现的次数 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/fold.html":{"url":"docs/cmd/fold.html","title":"折叠","keywords":"","body":"折叠折叠模式折叠命令折叠 折叠模式 可用选项 'foldmethod' 来设定折叠方式：set fdm=xxxx。 有 6 种方法来选定折叠(具体怎么使用.以后再填坑) manual 手工定义折叠 indent 更多的缩进表示更高级别的折叠 expr 用表达式来定义折叠 syntax 用语法高亮来定义折叠 diff 对没有更改的文本进行折叠 marker 对文中的标志折叠 只能使用一种折叠方式. 我主要使用indent或marker方式进行折叠。使用时，用 :set fdm=marker 命令来设置成marker折叠方式(fdm是foldmethod的缩写).要使每次打开vim时折叠都生效,则在.vimrc文件中添加设置,如添加 set fdm=syntax,就像添加其它的初始化设置一样 折叠命令 za 打开/关闭当前的折叠 zc 关闭当前打开的折叠 zo 打开当前的折叠 zm 关闭所有折叠 zM 关闭所有折叠及其嵌套的折叠 zr 打开所有折叠 zR 打开所有折叠及其嵌套的折叠 zd 删除当前折叠 zE 删除所有折叠 zj 移动至下一个折叠 zk 移动至上一个折叠 zn 禁用折叠 zN 启用折叠 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/register.html":{"url":"docs/cmd/register.html","title":"寄存器","keywords":"","body":"寄存器查看寄存器寄存器名存储到寄存器使用寄存器内容寄存器 录制宏的命令其实就是把操作录制保存到了寄存器里面了 查看寄存器 使用 :reg 命令 根据名字查看寄存器: :reg {reg name} 寄存器名 寄存器名包含以下名字 a-z 0-9 . : 上一个vim命令操作 % 当前文件名。 # buffer交换文件寄存器 \" 匿名寄存器。 默认的剪切，删除和复制寄存器。 如使用dd,yy命令时，默认把删除或复制的内容存储到该寄存器下。 + 粘贴板内容 / 上一次搜索的关键词 = 表达式寄存器。 _ 黑洞寄存器，存放到该寄存器的内容会被丢弃。 存储到寄存器 \"{reg name}{删除或复制命令} 如：\"syy就是把当前光标行的内容存储到s寄存器中。另一个是宏录制命令，可以把一系列操作录制的内容保存到寄存器中。 使用寄存器内容 在正常模式下使用命令: \"{reg name}p Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/bl.html":{"url":"docs/cmd/bl.html","title":"二合字母","keywords":"","body":"使用二合字母插入非常用字符使用二合字母插入非常用字符 在插入模式下执行 crtl + k 输入二合字母生成非常用字符 如: 12 // 会输出½ :h digraph-table 查看二合字母表 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/auto_complete.html":{"url":"docs/cmd/auto_complete.html","title":"自动补全","keywords":"","body":"自动补全自动补全 补全还是参考插件吧，vim自带的跟插件没法比。 ctrl + p 自动填充补全, 重复按会匹配下一个补全字符. Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/aline.html":{"url":"docs/cmd/aline.html","title":"对齐和缩进","keywords":"","body":"缩进缩出和对齐缩进缩出和对齐 普通模式下 >> 当前行缩进 当前行缩出 n>> 当前行至向下n行缩进 n 当前行至向下行缩出 == 当前行调整对齐 n== 当前行至向下n行调整对齐 G=gg 整个文件调整对齐 在可视模式下选中要调整大代码块使用 \">\" 或 \"=\" 调整缩进缩出或对齐 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/sign.html":{"url":"docs/cmd/sign.html","title":"标记","keywords":"","body":"标记标记 这个功能很好用使用标记可以快速移动. 到达标记后, 可以用Ctrl+o返回原来的位置. Ctrl+o和Ctrl+i(注意这两个组合键会跨文件) 很像浏览器上的 后退 和 前进. m{a-z} 标记光标所在位置, 局部标记, 只用于当前文件. m{A-Z} 标记光标所在位置, 全局标记.标记之后，退出Vim, 重新启动，标记仍然有效. `{a-z} 移动到标记位置. '{a-z} 移动到标记行的行首. `\" 移动到上次离开的地方. `. 移动到最后改动的地方. :marks 显示所有标记. :delmarks a b 删除标记a和b. :delmarks a-c 删除标记a、b和c. :delmarks a c-f 删除标记a、c、d、e、f. :delmarks! 删除当前缓冲区的所有标记. :help mark-motions 查看更多关于mark的知识. Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/tab.html":{"url":"docs/cmd/tab.html","title":"多标签","keywords":"","body":"多标签(分页)多标签(分页) :tabnew 创建一个新的文件在一个新的标签。 :tabe filename 打开新的标签。 :tabc 关闭当前标签 :tabo 关闭所有其他标签 :tabs 查看所有打开的标签 gt 跳转到下一个标签。 gT 跳转到前一个标签。 :tabn {count} 跳转到第count个标签，默认count=1。 :tabp {coutn} 跳转到倒数第count个标签，默认count=1。 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/windows.html":{"url":"docs/cmd/windows.html","title":"多窗口","keywords":"","body":"多窗口分屏窗口间移动移动窗口窗口尺寸调整多窗口 分屏 :sp 创建新的窗口，上下分屏。 :vsp 创建新的窗口，左右分屏。 + s 创建新的窗口，上下分屏。 + v 创建新的窗口，左右分屏。 窗口间移动 + w 循环移动光标到下一个窗口 + k 移动光标到上面的窗口 + j 移动光标到下面的窗口 + h 移动光标到左面的窗口 + l 移动光标到右面的窗口 移动窗口 + K 移动当前窗口至屏幕顶端。 + J 移动当前窗口至屏幕地段。 + H 移动当前窗口至屏幕左端。 + L 移动当前窗口至屏幕右端。 + T 移动当前窗口为新的标签页。 窗口尺寸调整 + = 将所有窗口调整至相同尺寸。 + - 将窗口的高度减少一行 + + 将窗口的高度增加一行 + 将窗口的宽度减少一行 + > 将窗口的宽度增加一行 + | 将窗口的宽度增加到最大 可以通过命令 resize +number 来自定义增加高度。可以通过命令 resize -number 来自定义减少高度。可以通过命令 vertical resize number 来自定义宽度大小 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/cmd/other.html":{"url":"docs/cmd/other.html","title":"其他","keywords":"","body":"命令模式进阶操作(挖坑)命令模式进阶操作(挖坑) q: 打开ex命令历史窗口, 在ex命令行下, 用 ctrl + f 可以进入历史命令行窗口(即q:进入的模式下) q/ 打开查找历史的命令窗口 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/conf/config.html":{"url":"docs/conf/config.html","title":"基本配置","keywords":"","body":"基本配置我的vimrc文件基本配置 基本配置不需要任何插件，直接拷贝到~/.vimrc中即可使用适合编辑或查看少量文件使用 注：双引号（\"）在.vimrc中是注释的意思 我的vimrc文件 plug 插件管理工具 vimrc 如果只使用vimrc文件,而不是用插件,需要把最下面一行 source ~/.vim/my_config/config.vim 注释掉(或删掉). config.vim 该配置文件放在 ~/.vim/my_config/ 目录下. 文件名可以自定义,但需要和vimrc文件加载该文件的文件名对应. 文件后缀改为 .vim 该文件主要是安装插件和配置插件 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/conf/plug.html":{"url":"docs/conf/plug.html","title":"插件","keywords":"","body":"使用插件插件管理器插件使用插件 插件管理器 用于管理插件的工具 如果没有插件管理器，在安装、更新、卸载等插件操作时，是一件比较麻烦的事，特别是当插件比较多的时候。 下面是两个比较新的工具，具体差异可以点击对应名字跳转到github查看。我选用的是第二个vim-plug dein.vim 异步安装更新，插件懒加载，ui不友好（dein-ui的ui友好），比vim-plug提供更多的函数 vim-plug 异步安装更新，插件懒加载，ui友好，简单易用，大部分操作都可以得到满足。 安装命令 curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 简单使用 在.vimrc文件中增加配置，以安装想要安装的插件。 call plug#begin('~/.vim/plugged') \"插件安装的路径 Plug 'vim-airline/vim-airline' \"想要安装的插件，对应于github上插件的仓库 call plug#end() 然后重新打开一个vim界面，输入:PlugInstall便会执行安装。 卸载插件只需把响应的配置注释掉再在新的vim界面输入:PlugClean即可(需要输入y进行确认) 插件 coc.nvim 请使用vim8.2以上版本。 Language Server Plug 'neoclide/coc.nvim',{'branch': 'release'} 如果git版本太低，会不支持分支切换的。 coc包含很多扩展（包括补全框架） coc的命令可以去github上面查看 安装扩展：CocInstall xxx(扩展名) 查看已安装扩展：CocList extensions vim-gutentags tag管理 Plug 'ludovicchabant/vim-gutentags' tagbar 浏览tag Plug 'majutsushi/tagbar' vim-visual-multi 请使用vim8.2以上版本。 Plug 'mg979/vim-visual-multi' 多光标，很强大。 vim-airline Plug 'vim-airline/vim-airline' Plug 'vim-airline/vim-airline-themes' status line 标签、状态栏个性化。 vim-startify 启动页面 Plug 'mhinz/vim-startify' nerdtree 树状文件浏览器 Plug 'preservim/nerdtree' nnn.vim 文件管理器 需要安装shell文件管理器(需要nnn 2.2版本以上) sudo yum install nnn Plug 'mcchrish/nnn.vim' ctrlp 文件搜索 Plug 'ctrlpvim/ctrlp.vim' rainbow 彩虹括号 Plug 'luochen1990/rainbow' \"彩虹括号插件 nerdcommenter 注释 Plug 'preservim/nerdcommenter' vim-easymotion 快速移动 Plug 'easymotion/vim-easymotion' goyo 专注模式 Plug 'junegunn/goyo.vim' limelight 聚焦模式 配合goyo效果很好 有些终端可能无法使用 Plug 'junegunn/limelight.vim' vim-title 新建文件自动添加title 该配置文件不依赖插件，可以直接添加使用 功能： 为c++、c、shell、py等语言在新建文件时添加相应的title，避免重复的操作 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "}}