" ======================================================================
"  FileName:     config.vim
"  Author:       dingfang
"  CreateDate:   2020-07-12 19:22:35
"  ModifyAuthor: dingfang
"  ModifyDate:   2020-12-16 20:50:50
" ======================================================================

call plug#begin('~/.vim/plugged')

" 添加title插件
Plug 'changdingfang/vim-title'

if v:version >= 802
    " 热键提示
    Plug 'liuchengxu/vim-which-key'

    " coc全家桶
    Plug 'neoclide/coc.nvim',{'branch': 'release'}

    " 可视模式(多光标)
    Plug 'mg979/vim-visual-multi', {'branch': 'master'}
endif

" tags管理
" Plug 'ludovicchabant/vim-gutentags'

" 浏览tags
" Plug 'majutsushi/tagbar'

" statusline, 标签
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" 树目录, 文件管理
Plug 'preservim/nerdtree'
" Plug 'mcchrish/nnn.vim'

" 文件搜索
Plug 'ctrlpvim/ctrlp.vim' 

" 彩虹括号
Plug 'luochen1990/rainbow' "彩虹括号插件

" 注释
Plug 'preservim/nerdcommenter'

" 启动页面
Plug 'mhinz/vim-startify'

" 快速移动
Plug 'easymotion/vim-easymotion'

" 专注模式
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" nginx
Plug 'chr4/nginx.vim'

call plug#end()


" - - - - - - - - - - - - - - - -"
" - - - vim-which-key - - - - - -"
" - - - - - - - - - - - - - - - -"
func VimWhichKeyFunc()
    nnoremap <silent> <space> :WhichKey '<space>'<cr>
    vnoremap <silent> <space> :WhichKeyVisual '<space>'<cr>
    nnoremap <silent> <leader> :WhichKey '<leader>'<cr>
    vnoremap <silent> <leader> :WhichKeyVisual '<leader>'<cr>
    nnoremap <silent> , :WhichKey ','<cr>
    vnoremap <silent> , :WhichKeyVisual ','<cr>
    nnoremap <silent> ] :WhichKey ']'<cr>
    vnoremap <silent> ] :WhichKeyVisual ']'<cr>
    nnoremap <silent> [ :WhichKey '['<cr>
    vnoremap <silent> [ :WhichKeyVisual '['<cr>

    set timeoutlen=500

    let g:which_key_map = {}
    let g:which_key_map['w'] = {
                \ 'name' : '+windows' ,
                \ 'w' : ['<C-W>w'     , '切换到下一个窗口']          ,
                \ 'c' : ['<C-W>c'     , '关闭当前窗口']         ,
                \ '-' : ['<C-W>s'     , '上下分割窗口']    ,
                \ '|' : ['<C-W>v'     , '左右分割窗口']    ,
                \ 'h' : ['<C-W>h'     , '光标移动到左窗口']           ,
                \ 'j' : ['<C-W>j'     , '光标移动到下窗口']          ,
                \ 'l' : ['<C-W>l'     , '光标移动到右窗口']          ,
                \ 'k' : ['<C-W>k'     , '光标移动到上窗口']             ,
                \ 'H' : ['<C-W>5<'    , '缩小窗口宽度']    ,
                \ 'J' : [':resize +5'  , '增大窗口高度']   ,
                \ 'L' : ['<C-W>5>'    , '增大窗口宽度']   ,
                \ 'K' : [':resize -5'  , '缩小窗口高度']      ,
                \ '=' : ['<C-W>='     , '统一窗口大小']        ,
                \ 's' : ['<C-W>s'     , '上下分割窗口']    ,
                \ 'v' : ['<C-W>v'     , '左右分割窗口']    ,
                \ }
    call which_key#register('<space>', "g:which_key_map")
endfunc
" - - - - - - - - - - - - - - - -"




" - - - - - - - - - - - - - - - -"
"- - - - vim-visual-multi - - - -"
" - - - - - - - - - - - - - - - -"
func VimVisualMultiFunc()
    let g:VM_leader = "\\"
endfunc
" - - - - - - - - - - - - - - - -"



" - - - - - - - - - - - - - - - -"
" - - - - - - airline - - - - - -"
" - - - - - - - - - - - - - - - -"
func AirlineFunc()
let g:airline_powerline_fonts = 3
let g:airline_theme = "solarized"
let g:airline_solarized_normal_green = 3
let g:airline#extensions#tabline#enabled = 3
let g:airline_section_b = '%{getcwd()}/'.expand("%:t")
endfunc
" - - - - - - - - - - - - - - - -"



" - - - - - - - - - - - - - - - -"
" - - - - - - nerdtree - - - - -"
" - - - - - - - - - - - - - - - -"
func NerdtreeFunc()
nnoremap <nowait> <leader>,, :NERDTreeToggle<cr>

"启动vim时,自动执行NERDTree
"autocmd vimenter * NERDTree

" vim在打开目录时自动启动树状结构
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

"当只剩余树目录窗口时,退出
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"树目录的样式
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
endfunc
" - - - - - - - - - - - - - - - -"



" - - - - - - - - - - - - - - - -"
" - - - - - - -nnn.vim - - - - - -"
func NnnVimFunc()
let g:nnn#set_default_mappings = 0
nnoremap <silent> <leader>nn :NnnPicker<CR>
nnoremap <leader>n :NnnPicker '%:p:h'<CR>
" Opens the nnn window in a split
let g:nnn#layout = 'new' " or vnew, tabnew etc.

" Or pass a dictionary with window size
let g:nnn#layout = { 'left': '~20%' } " or right, up, down

" Floating window (neovim latest and vim with patch 8.2.191)
let g:nnn#layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Debug' } }

let g:nnn#action = {
\ '<c-t>': 'tab split',
\ '<c-x>': 'split',
\ '<c-v>': 'vsplit' }
endfunc
" - - - - - - - - - - - - - - - -"


" - - - - - - - - - - - - - - - -"
" - - - - - ctrlp - - - - - - - -"
" - - - - - - - - - - - - - - - -"
func CtrlpFunc()
let g:ctrlp_map = ',,'
let g:ctrlp_open_multiple_files = 'v'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git)$',
            \ 'file': '\v\.(log|jpg|png|jpeg)$',
            \ }
endfunc
" - - - - - - - - - - - - - - - -"


" - - - - - - - - - - - - - - - -"
" - - - - - rainbow - - - - - - -"
" - - - - - - - - - - - - - - - -"
func RainbowFunc()
let g:rainbow_active=1
endfunc
" - - - - - - - - - - - - - - - -"



" - - - - - - - - - - - - - - - -"
"- - - - - coc.nvim  - - - - - -"
" - - - - - - - - - - - - - - - -"
func CocNvimFunc()
    let g:coc_global_extensions = [ 'coc-json', 'coc-css', 'coc-clangd', 'coc-sh', 'coc-html', 'coc-cmake', 'coc-python', 'coc-yaml', 'coc-vimlsp', 'coc-sql' ]

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
        " Recently vim can merge signcolumn and number column into one
        set signcolumn=number
    else
        set signcolumn=yes
    endif

    " 插入模式下，输入内容出现浮窗智能联想备选时，
    " 使用tab键可以向下切换备选。 等同于<c-n>   
    " 使用shift + tab可以向上切换备选。等同于 <c-p>
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction


    " Use <c-space> to trigger completion.
    if has('nvim')
        inoremap <silent><expr> <c-space> coc#refresh()
    else
        inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
    " position. Coc only does snippet and additional edit on confirm.
    " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
    if exists('*complete_info')
        inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
        inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    " 使用 `[g` 和 `]g` 在错误诊断之间进行跳转。  
    " 使用 `:CocDiagnostics` 可以查看缓冲区所有诊断信息。   
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " 代码跳转
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder.
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " 显示所有诊断。  
    nnoremap <silent><nowait> <leader>d  :<C-u>CocList diagnostics<cr>
    " 扩展管理  
    nnoremap <silent><nowait> <leader>e  :<C-u>CocList extensions<cr>
    " 显示命令
    nnoremap <silent><nowait> <leader>c  :<C-u>CocList commands<cr>
    " 查看当前文档的符号 
    nnoremap <silent><nowait> <leader>o  :<C-u>CocList outline<cr>
    " 搜索工作空间符号  
    nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>
    " 对下一项执行默认操作
    nnoremap <silent><nowait> <leader>j  :<C-u>CocNext<CR>
    " 对上一项执行默认操作
    nnoremap <silent><nowait> <leader>k  :<C-u>CocPrev<CR>
    " 恢复到上一次的coc列表
    nnoremap <silent><nowait> <leader>p  :<C-u>CocListResume<CR>
endfunc
" - - - - - - - - - - - - - - - -"


" - - - - - - - - - - - - - - - -"
" - - - majutsushi/tagbar - - - "
" - - - - - - - - - - - - - - - -"
func TagbarFunc()
    nnoremap <f8> :TagbarToggle<cr>
endfunc
" - - - - - - - - - - - - - - - -"


" - - - - - - - - - - - - - - - -"
" - - - - - - - - - - - - - - - -"
" - - - - nerdcommenter - - - - -"
func NerdCommenterFunc()
let g:NERDCustomDelimiters = { 'c': { 'left': '/*','right': '*/' } }
let g:NERDCustomDelimiters = { 'cpp': { 'left': '/*','right': '*/' } }
let g:NERDSpaceDelims = 1

let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1
endfunc
" - - - - - - - - - - - - - - - -"



" - - - - - - - - - - - - - - - -"
" - - - - - - - - - - - - - - - -"
" - - - - vim-easymotion - - - - -"
func VimEasyMotionFunc()
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <space>j <Plug>(easymotion-j)
map <space>k <Plug>(easymotion-k)
endfunc
" - - - - - - - - - - - - - - - -"



" - - - - - - - - - - - - - - - -"
" - - - - - - goyo.vim - - - - - -"
" - - - - - - - - - - - - - - - -"

func GoyoVimFunc()
" - - - - - - - - - - - - - - - -"
let g:goyo_width = 80
let g:goyo_height = 85
let g:goyo_linenr = 0
" function! s:goyo_enter()
"     if executable('tmux') && strlen($TMUX)
" 	silent !tmux set status off
" 	silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
"     endif
"     set noshowmode
"     set noshowcmd
"     set scrolloff=999
"     Limelight
"     " ...
" endfunction
" 
" function! s:goyo_leave()
"     if executable('tmux') && strlen($TMUX)
" 	silent !tmux set status on
" 	silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
"     endif
"     set showmode
"     set showcmd
"     set scrolloff=5
"     Limelight!
"     " ...
" endfunction
" 
" autocmd! User GoyoEnter nested call <SID>goyo_enter()
" autocmd! User GoyoLeave nested call <SID>goyo_leave()
endfunc
" - - - - - - - - - - - - - - - -"

" - - - - - - - - - - - - - - - -"
" - - - - limelight.vim - - - - -"
" - - - - - - - - - - - - - - - -"
func LimeLightVimFunc()
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'

    " Default: 0.5
    let g:limelight_default_coefficient = 0.7

    " Number of preceding/following paragraphs to include (default: 0)
    let g:limelight_paragraph_span = 1

    " Beginning/end of paragraph
    "   When there's no empty line between the paragraphs
    "   and each paragraph starts with indentation
    let g:limelight_bop = '^\s'
    let g:limelight_eop = '\ze\n^\s'

    " Highlighting priority (default: 10)
    "   Set it to -1 not to overrule hlsearch
    let g:limelight_priority = -1
endfunc
" - - - - - - - - - - - - - - - -"




" ============================================================================= "
" ============================================================================= "
" =======================  插件配置开关控制方法  ============================== "
" 
" 不需要再注释大片的配置内容，当想要关闭某个插件配置时，只需注释掉对应配置控制方法即可

if v:version >= 802
    call VimWhichKeyFunc()
    call CocNvimFunc()
    call VimVisualMultiFunc()
endif

call AirlineFunc()
call NerdtreeFunc()
" call NnnVimFunc()
call CtrlpFunc()
call RainbowFunc()
" call TagbarFunc()
call NerdCommenterFunc()
call VimEasyMotionFunc()
call GoyoVimFunc()
call LimeLightVimFunc()

" ============================================================================= "
" ============================================================================= "
" ============================================================================= "
