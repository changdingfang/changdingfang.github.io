{"./":{"url":"./","title":"前言","keywords":"","body":"前言命令用法参考前言 linux命令说明以及使用示例 这里只是我一般用到的命令, 当然linux命令还有很多很多 命令用法 \"[]\"为选填 \"()\" 为必填 参考 linux命令大全 菜鸟linux命令大全 每天一个命令行 快乐的linux命令行 htop Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/ls.html":{"url":"docs/filemanager/ls.html","title":"ls","keywords":"","body":"ls语法选项参数使用示例ls 显示指定目录下内容 语法 ls (选项) (参数) 选项 -a 显示所有文件和目录(ls内定将档案名或目录名称为“.”的视为影藏，不会列出) -l 额外显示文件形态、权限、拥有者、拥有组、文件大小、硬连接等信息 -t 用文件和目录的更改时间排序 -r 反序(默认文件名排序)排列并输出目录内容列表 -F 列出的文件名称后追加一个符号(目录\"/\", 可执行程序(\"*\")) 参数 默认显示当前目录(.)下的所有文件或目录 目录 文件 使用示例 $ ls ./ test.cpp hello.txt $ ls -l ./ total 8 -rw-rw-r-- 1 dingfang dingfang 13 Dec 6 19:53 hello.txt -rw-rw-r-- 1 dingfang dingfang 395 Dec 6 19:52 test.cpp $ ls -ltr ./ total 8 -rw-rw-r-- 1 dingfang dingfang 395 Dec 6 19:52 test.cpp -rw-rw-r-- 1 dingfang dingfang 13 Dec 6 19:53 hello.txt $ ls -l ./test.cpp -rw-rw-r-- 1 dingfang dingfang 395 Dec 6 19:52 test.cpp Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/pwd.html":{"url":"docs/filemanager/pwd.html","title":"pwd","keywords":"","body":"pwd语法使用示例pwd 显示工作目录 语法 pwd 使用示例 $ pwd /home/dingfang/work Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/cd.html":{"url":"docs/filemanager/cd.html","title":"cd","keywords":"","body":"cd语法参数使用示例cd 切换当前工作目录 语法 cd (参数) 参数 - 切换到最近一次的工作目录 ~ 切换到家目录 目录 切换到指定目录 使用示例 $ pwd /home/dingfang/work $ cd ~ $ pwd /home/dingfang $ cd ./hello $ pwd /home/dingfang/hello $ cd /home $ pwd /home $ cd - $ pwd /home/dingfang/hello Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/touch.html":{"url":"docs/filemanager/touch.html","title":"touch","keywords":"","body":"touch语法选项参数使用示例touch 创建文件或把已存在文件的时间标签更新为系统当前的时间(默认方式) 语法 touch (选项) [参数] 选项 -a 改变文件的读取时间记录 -m 改变文件的修改时间记录 -t 设定时间，格式为: YYYYmmDDHHMM 参数 文件名 使用示例 $ touch new.txt $ ls new.txt $ touch -m -t 202012120000 new.txt $ ls -l new.txt -rw-rw-r-- 1 dingfang dingfang 0 Dec 12 2020 new.txt Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-27 18:43:00 "},"docs/filemanager/mkdir.html":{"url":"docs/filemanager/mkdir.html","title":"mkdir","keywords":"","body":"mkdir语法选项参数使用示例mkdir 创建文件夹 语法 mkdir (选项) [参数] 选项 -p 若所要建立目录的上层目录目前尚未建立, 则会一并建立上层目录 参数 目录 指定要创建的目录列表, 多个目录之间用空格隔开 使用示例 $ mkdir mytest $ ls -F mytest/ Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/mv.html":{"url":"docs/filemanager/mv.html","title":"mv","keywords":"","body":"mv语法选项参数使用示例mv 移动文件夹或文件 语法 mv (选项) [参数] 选项 -b 当文件存在时, 覆盖前, 为其创建一个备份 -f 若目标文件或目录与现有的文件或目录重复, 则直接覆盖现有的文件或目录 参数 源文件 目标文件 源文件列表 如果\"目标文件\"是文件名则在移动文件的同时, 将其改名为\"目标文件\"; 如果\"目标文件\"是目录名则将源文件移动到\"目标文件\"下 使用示例 $ ls -F new.txt hello/ $ mv new.txt hello_new.txt $ ls -F hello_new.txt hello/ $ mv hello_new.txt hello/ $ ls -F hello/ $ ls -F hello/ hello_new.txt Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/cp.html":{"url":"docs/filemanager/cp.html","title":"cp","keywords":"","body":"cp语法选项参数使用示例cp 拷贝文件夹或文件 语法 cp (选项) [参数] 选项 -a 复制文件夹下所有内容(包括隐藏文件) -r 递归处理, 将指定目录下的所有文件与子目录一并处理 -p 保留源文件或目录的属性 参数 源文件 目标文件 制定源文件列表. 默认情况下, cp命令不能复制目录, 如果要复制目录，则必须使用-r选项; 指定目标文件. 当\"源文件\"为多个文件时, 要求\"目标文件\"为指定的目录. 使用示例 $ cp new.txt hello.txt $ cp -r hello/ hello_new Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/rm.html":{"url":"docs/filemanager/rm.html","title":"rm","keywords":"","body":"rm语法选项参数使用示例rm 删除文件夹或文件 语法 rm (选项) [参数] 选项 -r 递归处理, 将指定目录下的所有文件与子目录一并处理 -f 强制删除文件或目录 -v 显示指令执行的详细过程 参数 文件 指定被删除的文件列表 目录 指定删除的目录. 需要使用 -r 选项 使用示例 $ ls -F new.txt hello/ $ rm -rf hello/ $ ls -F new.txt 和 find 命令配合使用 rm 一次性删除文件太多会失败. 可以配合find使用 $ find ./xx -type f | xargs rm -f Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/filemanager/find.html":{"url":"docs/filemanager/find.html","title":"find","keywords":"","body":"find语法选项参数使用示例find 查找文件夹或文件 语法 find (参数) (选项) 选项 -ctime 查找在指定时间之时被更改的文件或目录, 单位以24小时计算 -exec 假设find指令的回传值为True, 就执行该指令 -name 指定字符串作为寻找文件或目录的范本样式 -type 只寻找符合指定的文件类型的文件 f 普通文件. d 文件夹 -maxdepth 设置最大目录层级 -mindepth 设置最小目录层级 -mmin 查找在指定时间曾被更改过的文件或目录, 单位以分钟计算 -mtime 查找在指定时间曾被更改过的文件或目录, 单位以24小时计算 -size [选项][单位] 查找符合指定的文件大小的文件 选项(默认为相等): - 小于该文件大小 + 大于该文件大小 单位: b 512位元组的区块 c 字节 k kb w 二个位元组 -path 目录名符合 dirName 的目录 参数 起始目录 查找的起始目录 使用示例 查找当前路径下所有已\"hello\"开头的普通文件 $ find ./ -type f -name \"hello*\" 查找小于1024字节的普通文件 $ find ./ -type f -size -1024c find 过滤掉指定目录(过滤目录时，目录名后面不能带斜杠) $ find . -path './nonDir' -prune -o -print find 过滤多个目录，查找普通文件 $ find . \\( -path '/home' -o -path '/var' \\) -prune -o -type f -print 找到一个文件夹下深度为1的所有子目录下所包含的文件个数, 每个子文件夹单独列出 $ find . -maxdepth 1 -type d | while read dir; do count=$(find \"$dir\" -type f | wc -l); echo \"$dir : $count\"; done Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/cat.html":{"url":"docs/text/cat.html","title":"cat","keywords":"","body":"cat语法选项参数使用示例cat 打印文件(文本)内容到标准输出设备 语法 cat (选项) (参数) 选项 -n 或 -number 有1开始对所有输出的行数编号 -b 或 --number-nonblank 和-n相似，只不过对于空白行不编号 -s 或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行 -v 或 -show-nonprinting 使用 \"^\" 和 \"M-\" 符号，除了LFD和TAB之外 -E 或 -show-ends 每行结尾处显示\"$\" -T 或 -show-tabs 将TAB字符显示为 \"^|\" -A 显示不可打印字符，等价于 -vET -e 等价于\"-vE\"选项 -t 等价于\"-vT\"选项 参数 文件名 可以是多个文件名，用空格隔开 使用示例 假设有一个 hello.txt 文件，内容如下 hello world didi $ cat hello.txt hello world didi $ cat -n hello.txt 1 hello world 2 didi $ cat -vET hello.txt hello world$ didi$ Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/tail.html":{"url":"docs/text/tail.html","title":"tail","keywords":"","body":"tail语法选项参数使用示例tail 输出文件的尾部内容 语法 tail (选项) (参数) 选项 -f 显示文件最新追加的内容，用于实时监控文件输出 -n 输出文件的尾部N(N位数字)行内容 参数 文件 可输出多个文件，中间用空格隔开 使用示例 $ tail hello.txt 实时跟踪打印输出，只要文件内容有新的追加，就会持续输出 $ tail -f hello.txt Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/head.html":{"url":"docs/text/head.html","title":"head","keywords":"","body":"head语法选项参数使用示例head 显示文件的开头的内容, 默认显示10行 语法 head (选项) (参数) 选项 -n 指定显示头部内容的行数 参数 文件 可输出多个文件，中间用空格隔开 使用示例 $ head -n 10 hello.txt Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/grep.html":{"url":"docs/text/grep.html","title":"grep","keywords":"","body":"grep语法选项参数范本样式文件使用示例grep 文本过滤 用于查找文件里符合条件的字符串，支持使用正则表达式 语法 grep (选项) (范本样式) (文件名或管道传输数据) 选项 -i 忽略字符大小写的差别 -n 在显示符合范本样式的那一列之前, 标示出该列的编号 -r 递归检索文件夹 -s 不显示错误信息 -o 只输出文件中匹配到的部分 -v 显示不包含匹配文本的所有行 -w 只显示全字符合的列 -x 只显示全列符合的列 -E 可使用扩展正则表达式 参数 范本样式 匹配字符串或匹配正则表达式 文件 文件 管道传输数据 通常配合其它命令通过管道过滤数据 使用示例 输出匹配到hello world的行 $ grep \"hello world\" test.log $ echo -e \"hello world\\nnihao\" | grep \"hello\" $ grep -E \"^hello*\" test.log Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/sed.html":{"url":"docs/text/sed.html","title":"sed","keywords":"","body":"sed语法选项脚本参数使用示例sed 处理文本文件，功能强大，有许多语法，支持正则表达式 语法 sed [选项] (脚本) (参数) 选项 -e 以选项中的指定的script来处理输入的文本文件. -f 与选项中的指定的script文件来处理输入的文本文件 -h 显示帮助 -n 仅显示script处理后的结果 -V 显示版本信息 -r 在脚本中使用正则表达式 脚本 脚本命令 a\\ 在当前行下面插入文本. i\\ 在当前行上面插入文本 c\\ 把选定的行改为新的文本 d 删除, 删除选择的行 D 删除模板块的第一行. s 替换指定字符 p 打印模板块的行 P (大写)打印模板块的第一行 sed替换标记 g 表示行内全面替换 p 表示打印行 w 表示把行写入一个文件 x 表示互换默默块中的文本和缓冲区中的文本 y 表示把一个字符翻译为另外的字符(但是不用正则表达式) \\1 子串匹配标记 & 已匹配字符串标记 参数 文件 指定待处理的文本文件列表 使用示例 打印9:00-12:00的日志 $ sed -n '/2019:09:00/,/2019:12:00/'p test.log 打印2－5行内容 $ sed -n '2,5p' test.log 在文件尾部追加新行写入内容(如果要写入空格，需要使用转义) $ sed -i '$a hello world' test.txt 在第 5 行前添加字符串(要保证文件大于5行) $ sed -i '5i hello world' test.txt Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/wc.html":{"url":"docs/text/wc.html","title":"wc","keywords":"","body":"wc语法选项参数使用示例wc 用于计算(字符数，行数等) 语法 wc (选项) (参数) 选项 -c 只显示Bytes数 -l 只显示列数 -w 只显示字数 参数 文件 需要统计的文件列表 使用示例 $ wc -l test.txt Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/sort.html":{"url":"docs/text/sort.html","title":"sort","keywords":"","body":"sort语法选项参数使用示例sort 将文件进行排序，并将排序结果标准输出。 即可以从特定文件，也可以从stdin中获取输入。 语法 sort (选项) (参数) 选项 -b 忽略每行前面的开始出现的空格字符 -c 检查文件是否已经按照顺序排序 -d 排序时，处理英文字母、数字和空格字符外，忽略其他字符 -f 排序时，将小写字母视为大写字母 -i 排序时，除了040至176之间的ascii字符外，忽略其他字符 -m 将几个排序号的文件进行合并 -M 将前面3个字母依照月份的缩写进行排序 -n 依照数值的大小排序 -o 将排序后的结果存入到指定的文件 -r 以相反的顺序排序 -t 指定排序时所用的栏位分隔字符 +- 以指定的栏位来排序，范围由起始栏位到结束栏位的前一位 参数 文件: 指定待排序的文件列表 使用示例 无 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/text/uniq.html":{"url":"docs/text/uniq.html","title":"uniq","keywords":"","body":"uniq语法选项参数使用示例uniq 用于检查和删除文本文件中重复出现的行列，一般与sort命令配合使用 语法 uniq (选项) (参数) 选项 -c 在每列旁边显示该行重复出现的次数 -d 仅显示重复出现的行列 -f 忽略比较指定的栏位 -s 忽略比较指定的字符 -u 仅显示出一次的行列 -w 指定要比较的字符 参数 输入文件 指定要去除重复行文件。如果不指定，那么从标准输入读取数据 输出文件 指定要去除重复行后的内容要写入到输出文件。如果不指定此选项，则将内容显示到标准输出设备。 使用示例 test.txt 文件内容： 1 1 2 2 3 4 4 4 执行去重 $ uniq test.txt 输出： 1 2 3 4 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/user/whoami.html":{"url":"docs/user/whoami.html","title":"whoami","keywords":"","body":"whoami语法使用示例whoami 用于打印当前有效的用户名称 语法 whoami 使用示例 $ whoami dingfang $ su root $ whoami root Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/user/su.html":{"url":"docs/user/su.html","title":"su","keywords":"","body":"su语法选项参数使用示例su 用于变更为其他使用者的身份 root 用户切换其他用户无须输入密码 语法 su [选项] (参数) 选项 -m 执行su时不改变环境变量 -c '' 变更账号为 USER 的使用者并执行命令，然后再变回原来的使用者 参数 用户名 使用示例 切换到root， 需要输入root密码 $ su root 以 dingfang 用户执行命令 $ su -c 'echo \"hello wrold\"' dingfang 某些系统可以使用 sudo -i 切换到root 或者可以使用 sudo bash -c su 切换到root Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/user/user.html":{"url":"docs/user/user.html","title":"user","keywords":"","body":"useradd语法选项参数使用示例userdel语法选项参数使用示例chgrp语法选项使用示例chown语法选项使用示例chmod语法选项使用示例跟用户相关的一些配置文件/etc/default/useradd/etc/login.defs为普通用户添加 sudoroot用户远端登录权限useradd 建立用户账号 语法 useradd (选项) (参数) 选项 -c 加上备注文字。备注文字会保存在passwd的备注栏位中 -d 指定用户登入时的启始目录 -D 变更预设值 -e 指定帐号的有效期限 -f 指定在密码过期后多少天即关闭该帐号 -g 指定用户所属的群组 -G 指定用户所属的附加群组 -m 自动建立用户的登入目录 -M 不要自动建立用户的登入目录 -n 取消建立以用户名称为名的群组 -r 建立系统帐号 -s 指定用户登入后所使用的shell -u 指定用户id 参数 用户名 要创建的用户名 使用示例 通常创建用户命令 $ useradd -m -d /home/test2 -s /bin/bash test 带有效期创建用户命令 $ useradd -f 30 -m -d /home/test2 -s /bin/bash test userdel 删除用户/组 语法 userdel [选项] (用户名) 选项 -f, --force 强制 -r, --remove 删除主目录和邮件池 -R, --root CHROOT_DIR chroot 到的目录 -Z, --selinux-user 为用户删除所有的 SELinux 用户映射 参数 要删除的用户名 使用示例 删除用户test $ userdel test 使用参数 -rf 来删除相关文件目录，这一步具有危险性. $ userdel -rf test chgrp 改变文件或目录所属的用户组 语法 chgrp (选项) [组群] [文件名/文件夹名] 选项 -R 递归处理子目录和文件 使用示例 修改test目录及其子目录用户组为 dingfang $ chgrp -R dingfang test chown 改变某个文件或目录的所有者和所属的组 语法 chown (选项) [用户名]:(组群) [文件名/文件夹名] 选项 -R 递归处理子文件夹子文件 使用示例 修改test目录及其子目录所属用户和用户组为 dingfang $ chown-R dingfang:dingfang test chmod 变更文件或目录的权限 语法 chmod (选项) [文件名/文件夹名] 选项 -R 递归处理子文件夹子文件 + 开启权限范围的文件或目录的该选项权限设置 - 关闭权限范围的文件或目录的该选项权限设置 = 指定权限范围的文件或目录的该选项权限设置 权限范围 权限范围 说明 u User, 即文件或目录的拥有者 g Group, 即文件或目录的所属群组 o Other, 除了文件或目录拥有者或所属群组之外, 其他用户皆属于这个范围 a All, 即全部的用户, 包含拥有者, 所属群组以及其他用户 权限设置 权限设置 说明 r 读取权限, 数字代号为\"4\" w 写入权限, 数字代号为\"2\" x 执行或切换权限，数字代号为\"1\" - 不具任何权限, 数字代号为\"0\" s 特殊功能说明: 变更文件或目录的权限 使用示例 修改 test.txt 文件权限为 rwxrwxr-x $ chmod 775 test.txt 增加 test.txt 文件所有用户可执行权限 $ chmod +x test.txt 跟用户相关的一些配置文件 /etc/passwd 　　 //用户账户信息，可以看出用户名称 /etc/shadow //用户账户加密后信息，包括但不限于/etc/passwd中的信息 /etc/group //组账户信息，可以看出组名称 /etc/gshadow 　　　 //组账户安全信息，包括但不限于/etc/group中的信息 /etc/default/useradd //账户创建时默认值 /etc/skel/ //包含默认文件的目录,具体作用尚不清楚 /etc/login.defs //安全性的默认配置，与上面/etc/default/useradd有区别 /etc/default/useradd # useradd defaults file GROUP=100 //起始GID值 HOME=/home //家目录位置 INACTIVE=-1　　　　　　　　　　　//有效时间，负值为永久，正数代表天数 EXPIRE= SHELL=/bin/bash //shell路径 SKEL=/etc/skel //默认配置文件路径 CREATE_MAIL_SPOOL=yes //是否创建邮件池，具体作用待以后学习 /etc/login.defs MAIL_DIR /var/spool/mail ... # Password aging controls: 密码期限配置 # # PASS_MAX_DAYS Maximum number of days a password may be used. # PASS_MIN_DAYS Minimum number of days allowed between password changes. # PASS_MIN_LEN Minimum acceptable password length. # PASS_WARN_AGE Number of days warning given before a password expires. # PASS_MAX_DAYS 99999 PASS_MIN_DAYS 0 PASS_MIN_LEN 8 PASS_WARN_AGE 7 ... # Min/max values for automatic uid selection in useradd 最小/最大UID设置 # UID_MIN 1000 //我们创建的用户的UID从1000开始 UID_MAX 60000 .... # Min/max values for automatic gid selection in groupadd # GID_MIN 1000 GID_MAX 60000 .... CREATE_HOME yes //是否创建家目录 ... # Use SHA512 to encrypt password. //采用SHA512加密 ENCRYPT_METHOD SHA512 从文件内容可见，/etc/login.defs 是比较宏观的进行偏重安全方面的配置。 为普通用户添加 sudo 为 test 用户添加 sudo $ vim /etc/sudoers 找到如下一行，在下面添加即可 root ALL=(ALL) ALL test ALL=(ALL) ALL # 这一行是添加的 root用户远端登录权限 在实际环境中,为了防止黑客对root账户进行暴力破解,我们通常禁止root账户SSH远程连接. $ vim /etc/ssh/sshd.config 修改配置 # no 表示root无法远端登录, yes 表示root可以远端登录 PermitRootLogin no 重启sshd服务(不同系统命令有所不同) $ systemctl restart sshd.service 或 $ service sshd restart Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/package/tar.html":{"url":"docs/package/tar.html","title":"tar","keywords":"","body":"tar语法选项参数目标文件源文件使用示例tar 压缩解压, 打包解包 语法 tar (选项) (目标文件) [源文件] 选项 -c 建立新的备份(打包, 压缩)文件 -d 记录文件的差别 -f 指定备份文件, 必须是最后一个选项 -p 用原来的文件权限还原文件 -r 添加文件到已经压缩的文件 -t 列出备份文件的内容 -v 显示操作过程 -x 从备份文件中还原文件 -z 通过gzip指令处理备份文件 -C 或 --directory= 切换到指定的目录(可以避免打包时带有指定路径的前缀) 参数 目标文件 打包或压缩后的文件名名 源文件 准备打包或压缩的文件或目录列表 文件 目录 使用示例 将a,b,c三个txt文件打包到x.tar $ tar -cf x.tar a.txt b.txt c.txt 将m文件夹下所有文件打包成x.tar $ tar -cf x.tar m/ 将m文件夹下所有文件打包并压缩成x.tar.gz $ tar -zcf x.tar.gz m/ 将x.tar以原来的文件权限解包到当前文件夹下 $ tar -xpf x.tar linux下以系统当前时间前一天命名文件并打包压缩 tar --remove-files -zcvf /data/log1/`date -d\"1 day ago\" +\"%Y%m%d\"`.tar.gz /data/log2/`date -d\"1 day ago\" +\"%Y%m%d\"`*.log --remove-files 打包压缩后删除源文件. -zcvf 打包压缩. date -d\"1 day ago\" +\"%Y%m%d\" 获取系统当前时间前一天. 命令解析: 把/data/log2/目录下以当前系统时间前一天为前缀且以.log 为后缀的文件打包压缩到 /data/log1/目录下,并把归档名字名命为系统当前时间的前一天.如,今天是20191203则文件名为20191203打包完后,删除源文件. 分卷打包压缩 tar czf - ./path | split -d -b 1024m - out ./path [文件或者路径] 1024m [分卷的单卷大小(单位m)] out [分卷的名字, 以(out + 序号)命名] Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/package/zip.html":{"url":"docs/package/zip.html","title":"zip/unzip","keywords":"","body":"zip语法选项参数目标文件源文件使用示例unzip语法选项参数使用示例zip 用于压缩文件 语法 zip [选项] (目标文件) (源文件列表) 选项 zip 选项很多，平时我很少用这个命令来进行压缩文件，简单使用即可 -r 递归处理 参数 目标文件 打包或压缩后的文件名名 源文件 准备打包或压缩的文件或目录列表 文件 目录 使用示例 $ zip test.zip test1.log test2.log hello*.txt unzip 用于解压由 zip 压缩的 .zip 压缩包 语法 unzip [选项] (参数) 选项 l 显示压缩文件内所包含的文件 -n 解压时不要覆盖原有文件 -o 不必询问，解压时覆盖原有文件 -d 指定文件解压后存储的目录，目录不存在会自动创建(只能自动创建一层，多层需要手动提前创建好) 参数 压缩文件 使用示例 $ unzip test.zip -d test Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/nohup.html":{"url":"docs/process/nohup.html","title":"nohup","keywords":"","body":"nohup语法命令使用示例nohup 将程序以忽略挂起信号的方式运行起来, 被运行的程序的输出信息将不会显示到终端 语法 nohup (命令) 命令 shell命令、可执行程序等，一般结尾使用 & 运行于后台 使用示例 ls的输出将会定向到当前文件夹下的nohup.out文件 nohup ls 后台运行shell可执行程序, shell的输出将会定向到当前文件夹下的nohup.out文件 $ nohup ./shell & 后台运行shell可执行程序, 并把标准输出和错误输出重定向到 /dev/null $ nohup ./shell >/dev/null 2>&1 & Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/ps.html":{"url":"docs/process/ps.html","title":"ps","keywords":"","body":"ps语法选项使用示例ps 语法 显示运行的进程信息，通常配合 grep 一起使用 ps (选项) 选项 -a 显示所有终端机下执行的程序, 除了阶段作业领导者之外 a 显示现行终端机下的所有程序, 包括其他用户的程序 e 列出程序时, 显示每个程序所使用的环境变量 -e 显示所有程序 f 用ASCII字符显示树状结构, 表达程序间的相互关系 -f 显示UID, PPIP, C与STIME栏位 -l 采用详细的格式来显示程序状况 u 以用户为主的格式来显示程序状况 x 显示所有程序, 不以终端机来区分 使用示例 进程启动时间 $ ps -p ${pid} -o lstart 进程运行已运行时间 $ ps -p ${pid} -o etime Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/pstack.html":{"url":"docs/process/pstack.html","title":"pstack","keywords":"","body":"pstack使用示例pstack 显示每个进程的栈跟踪。pstack必须由相应进程的属主或root运行。可以使用pstack来确定进程挂起的位置 该命令允许使用的唯一选项是要检查的进程的pid 使用示例 pstack ${pid} Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/taskset.html":{"url":"docs/process/taskset.html","title":"taskset","keywords":"","body":"taskset语法选项参数使用示例taskset 用于进程cpu调优，可以把某个进程指定在某个cpu内工作。在某些情况下能够提高cpu的整体性能 语法 task (选项) (cpu-list) (pid | cmd) 选项 -a 对给定pid的所有任务的设置或检索cpu相关性 -p 指定进程号 -c 指定cpu编号(cpu的第几个核心数) 参数 cpu编号列表 进程号 命令 使用示例 cpu核心数查看 $ cat /proc/cpuinfo/ | grep \"cpu cores\" | uniq 查看给定进程号的cpu相关性 $ taskset -p ${pid} 使给定的进程号在1和2核心上工作 $ taskset -c 1,2 -p ${pid} Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/kill.html":{"url":"docs/process/kill.html","title":"kill","keywords":"","body":"kill语法选项参数kill 将信号发送给进程, 默认发送编号15信号 语法 kill (选项) (参数) 选项 -l 若不加选项, 则-l参数会列出全部的信息名称 参数 进程或作业识别号 指定要删除的进程或作业 ## 使用示例 给进程号为12345的进程发送编号为9的信号 ```shell kill -9 12345 常用信号 信号名 编号 含义 HUP 1 终端断线 INT 2 中断( 同 Ctrl + C ) QUIT 3 退出( 同 Ctrl + \\ ) TERM 15 终止 KILL 9 强制终止 CONT 18 继续( 与STOP相反, fg/bg命令) STOP 19 暂停( 同 Ctrl + Z ) Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/pstree.html":{"url":"docs/process/pstree.html","title":"pstree","keywords":"","body":"pstree语法选项使用示例pstree 以树状图的方式展现进程之间的派生关系 语法 pstree (选项) 选项 -a 显示每个程序的完整指令，包含路径，参数或是常驻服务的标示； -c 不使用精简标示法； -G 使用VT100终端机的列绘图字符； -h 列出树状图时，特别标明现在执行的程序； -H 此参数的效果和指定\"-h\"参数类似，但特别标明指定的程序； -l 采用长列格式显示树状图； -n 用程序识别码排序。预设是以程序名称来排序； -p 显示程序识别码; (可以显示出线程) -u 显示用户名称； -U 使用UTF-8列绘图字符； -V 显示版本信息。 -T 隐藏线程, 仅显示进程. 使用示例 输出进程号12345进程的线程数量 pstree -p 12345 | wc -l Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/top.html":{"url":"docs/process/top.html","title":"top","keywords":"","body":"top语法选项使用示例其他技巧top 可以实时动态的查看系统的整体运行情况，也可以查看单独进程的运行情况 语法 top (选项) 选项 -H 显示进程的线程 配合 -p 可以快速找到某个进程占用资源较多的线程 -b 以批处理模式操作 -c 显示完整的命令 -d 屏幕刷新时间间隔 -I 忽略失效过程 -s 保密模式 -S 累积模式 -i 设置时间间隔 -u 指定用户名 -p 指定进程 -n 循环显示的次数 使用示例 显示进程1两次 top -n 2 -p 1 输出示例 $ top -b -n 1 top - 21:12:13 up 86 days, 9:01, 3 users, load average: 0.69, 0.57, 0.40 Tasks: 148 total, 2 running, 145 sleeping, 1 stopped, 0 zombie %Cpu(s): 25.0 us, 6.2 sy, 0.0 ni, 56.2 id, 12.5 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 3880196 total, 744480 free, 608440 used, 2527276 buff/cache KiB Swap: 0 total, 0 free, 0 used. 2974328 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 26191 dingfang 20 0 161996 2084 1532 R 6.2 0.1 0:00.01 top 1 root 20 0 51832 3784 2356 S 0.0 0.1 83:13.27 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:01.20 kthreadd 4 root 0 -20 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0H 输出说明 前五行是当前系统情况整体的统计信息区第一行: 任务队列信息, 同 uptime 命令的执行结果. 列 说明 21:12:13 当前体统时间 up 86 days, 9:01 系统运行的时间 3 users 当前登录的用户数量 load average ... 分别为1分钟、5分钟、15分钟系统负载情况 第二行: 分别指总进程数量、正在运行的进程数量、睡眠的进程数量、stoped状态的进程数量、僵尸进程数量。 第三行: cpu状态信息 列 说明 25.0 us 用户空间占用cpu百分比 6.2 sy 内核占用cpu百分比 0.0 ni 改变过优先级的进程占用cpu百分比 56.2 id 空闲cpu百分比 12.5 wa io等待占用cpu百分比 0.0 hi 硬中断占用cpu百分比 0.0 si 软中断占用cpu百分比 0.0 st 第四行: 内存状态分别是 物理内存总量、空闲内存总量、使用中的内存总量、缓存内存量 第五行: swap交换区信息分别是 交换区总量、空闲交换区总量、使用的交换区总量、可用的交换区总量 下面是显示各个进程的状态监控 字段 说明 PID 进程id USER 进程所有者 PR 进程优先级 NI nice值. 越大表示优先级越低 VIRT 虚拟内存总量 RES 物理内存占用 SHR S 共享内存 %CPU 上次更新到现在cpu时间占用百分比 %MEM 进程占用物理内存百分比 TIME+ 进程使用cpu时间总计 COMMAND 进程名称(命令名/命令行) 使用 shift + 方向键 可以更换排序列，默认为cpu列由大到小排序b 可以高亮当前运行进程 x 可以高亮显示排序列(一般需要b先开启) M: 根据内存排序 P: 根据cpu百分比排序 T: 根据时间排序 t: 切换显示进程和cpu信息 m: 切换显示内存信息 I: 切换显示平均负载和启动时间信息 i: 忽略闲置和僵尸进程 o: 改变显示项目的顺序 f: 从当前显示中添加或删除 S: 切换到累积模式 s: 改变两次刷新之间的延迟时间；会提示输入新的时间，单位为s，小数会换算成ms k: 给一个进程发送信号；会提示输入进程的pid和发送到信号 其他技巧 在top基本视图中，按数字“1”，可以监控每个逻辑cpu的状况 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/process/htop.html":{"url":"docs/process/htop.html","title":"htop","keywords":"","body":"htop的使用简介软件的获取与安装源码安装yum和rpm包安装htop的使用快捷键功能F1：显示帮助信息F2 htop设定F3 搜索进程F4：过滤器F5:以树形方式显示F6：排序方式F7,F8：调整进程nice值F9：杀死进程F10:退出htophtop的使用简介 类似于对top监控软件, 功能比top更加丰富强大 两者相比起来，top比较繁琐 默认支持图形界面的鼠标操作 可以横向或纵向滚动浏览进程列表，以便看到所有的进程和完整的命令行 杀进程时不需要输入进程号等 软件的获取与安装 htop的安装，既可以通过源码包编译安装，也可以配置好yum源后网络下载安装 源码安装 在htop的项目官方网站上：http://sourceforge.net/projects/htop/直接下载即可 每个命令后面的^c 是因为我已经安装过了, 这个是取消命令用的, 真正安装中不能有 ^c (ctrl + c) yum和rpm包安装 个人推荐yum安装，能够自动的解决软件包依赖关系，安装即可。 htop的使用 安装完成后，命令行中直接敲击htop命令，即可进入htop的界面 各项从上至下分别说明如下： 左边部分从上至下，分别为，cpu、内存、交换分区的使用情况，右边部分为：Tasks为进程总数，当前运行的进程数、Load average为系统1分钟，5分钟，10分钟的平均负载情况、Uptime为系统运行的时间。 以上各项分别为： PID：进行的标识号 USER：运行此进程的用户 PRI：进程的优先级 NI：进程的优先级别值，默认的为0，可以进行调整 VIRT：进程占用的虚拟内存值 RES：进程占用的物理内存值 SHR：进程占用的共享内存值 S：进程的运行状况，R表示正在运行、S表示休眠，等待唤醒、Z表示僵死状态 %CPU：该进程占用的CPU使用率 %MEM：该进程占用的物理内存和总内存的百分比 TIME+：该进程启动后占用的总的CPU时间 COMMAND：进程启动的启动命令名称 快捷键功能 h, ? F1 查看htop使用说明 S F2 htop 设定 / F3 搜索进程 \\ F4 增量进程过滤器 t F5 显示树形结构 F6 选择排序方式 [ F7 可减少nice值可以提高对应进程的优先级 ] F8 可增加nice值，降低对应进程的优先级 k F9 可对进程传递信号 q F10 结束htop u 只显示一个给定的用户的过程 U 取消标记所有的进程 H 显示或隐藏用户线程 K 显示或隐藏内核线程 F 跟踪进程 P 按CPU 使用排序 M 按内存使用排序 T 按Time+ 使用排序 l 显示进程打开的文件 I 倒转排序顺序 s 选择某进程，按s:用strace追踪进程的系统调用 F1：显示帮助信息 F2 htop设定 鼠标点击Setup或者按下F2 之后进入htop 设定的页面， Setup 选项下的： Meters 设定顶端的 显示信息，分为左右两侧，Left column 表示左侧的显示的信息，Right column表示右侧显示的信息，如果要新加选项，可以选择Available meters添加，F5新增到上方左侧，F6新增到上方右侧。Left column和Right column下面的选项，可以选定信息的显示方式，有LED、Bar(进度条)、Text(文本模式)，可以根据个人喜好进行设置 Display options 选择要显示的内容，按空格 x表示显示，选择完后，按F10保存 Colors 设定界面以什么颜色来显示，个人认为用处不大，各人喜好不同，假如我们选择Black on White后显示效果如下 Colums 作用是增加或取消要显示的各项内容，选择后F7(向上移动)、F8(向下移动)、F9(取消显示、F10(保存更改))此处增加了PPID、PGRP，根据各人需求，显示那些信息。 F3 搜索进程 在界面下按F3或直接输入”/”就可以直接进入搜索模式，是按照进程名进行搜索的。例如 搜索到的进程会用设定的颜色标记出来，方便查看 F4：过滤器 相当于模糊查找，不区分大小写，下方输入要搜索的内容后，则界面只显示搜索到的内容，更加方便查看，例如： F5:以树形方式显示 F6：排序方式 按下F6后会跳转至上图界面，让您选择以什么方式进行排序,在Sort by下选择您要以什么来排序 F7,F8：调整进程nice值 F7表示减小nice值(增大优先级),F8增大nice值(减小优先级)，选择某一进程，按F7或F8来增大或减小nice值，nice值范围为-20-19，此处我把apache的nice值调整到了19 F9：杀死进程 选择某一进程按F9即可杀死此进程，很方便 F10:退出htop Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/ifconfig.html":{"url":"docs/net/ifconfig.html","title":"ifconfig","keywords":"","body":"ifconfig语法参数使用示例ifconfig 配置和显示Linux内核中网络接口的网络参数 语法 ifconfig (参数) 参数 add 设置网络设备IPv6的ip地址 del 删除网络设备IPv6的IP地址 down 关闭指定的网络设备 设置网络设备的类型与硬件地址 io_addr\\ 设置网络设备的I/O地址 irq 设置网络设备的IRQ media 设置网络设备的媒介类型 mem_start 设置网络设备在主内存所占用的起始地址 metric 指定在计算数据包的转送次数时，所要加上的数目 mtu 设置网络设备的MTU netmask 设置网络设备的子网掩码 tunnel 建立IPv4与IPv6之间的隧道通信地址 up 启动指定的网络设备 -broadcast 将要送往指定地址的数据包当成广播数据包来处理 -pointopoint 与指定地址的网络设备建立直接连线，此模式具有保密功能 -promisc 关闭或启动指定网络设备的promiscuous模式 IP地址 指定网络设备的IP地址 网络设备 指定网络设备的名称 使用示例 $ ifconfig Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/ethtool.html":{"url":"docs/net/ethtool.html","title":"ethtool","keywords":"","body":"ethtool语法选项参数ethtool 获取以太网卡的配置信息，或者修改这些配置 语法 ethtool [选项] (参数) 选项 i 显示网卡驱动的信息(驱动名称、版本等) 参数 网卡名 一般是 eth 开头 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/wget.html":{"url":"docs/net/wget.html","title":"wget","keywords":"","body":"wget语法选项参数使用示例wget 从指定的URL下载文件 语法 wget (选项) (参数) 选项 -a 在指定的日志文件中记录资料的执行过程 -A 指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔 -b 进行后台的方式运行wget -B 设置参考的连接地址的基地地址 -c 继续执行上次终端的任务 -C 设置服务器数据块功能标志on为激活，off为关闭，默认值为on -d 调试模式运行指令 -D 设置顺着的域名列表，域名之间用“，”分隔 -e 作为文件“.wgetrc”中的一部分执行指定的指令 -h 显示指令帮助信息 -i 从指定文件获取要下载的URL地址 -l 设置顺着的目录列表，多个目录用“，”分隔 -L 仅顺着关联的连接 -r 递归下载方式 -O 指定下载后保存的文件名 -nc 文件存在时，下载文件不覆盖原有文件 -nv 下载时只显示更新和出错信息，不显示指令的详细执行过程 -q 不显示指令执行过程 -nh 不查询主机名称 -v 显示详细执行过程 -V 显示版本信息 --passive-ftp 使用被动模式PASV连接FTP服务器 --follow-ftp 从HTML文件中下载FTP连接文件 参数 URL 指定下载的url地址 使用示例 $ wget http://xxxx.xx Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/curl.html":{"url":"docs/net/curl.html","title":"curl","keywords":"","body":"curl语法选项参数使用示例curl 使用url规则在命令行下进行文件传输的一个工具 一个很强大的综合传输工具 支持文件的上传和下载 支持HTTP、HTTPS、FTP等多种协议 支持POSt、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小等 语法 curl (选项) (参数) 选项 -X 指定HTTP请求方法(GET,POST,PUT... ...) -H 指定标头 -d http post方式传送数据 -x 指定HTTP请求的代理 -v 输出通信的整个过程，用于调试 -u 用来设置服务器认证的用户名和密码 curl -u 'df:123' https://df.com/login -o 将服务器响应保存成文件，与wget命令等效 -I 向服务器发出HEAD请求，然后将服务器返回的HTTP标头打印出来 --head等同于 -I 参数 uri 使用示例 普通的get请求 curl http://baidu.com Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/netstat.html":{"url":"docs/net/netstat.html","title":"netstat","keywords":"","body":"netstat语法选项使用示例netstat 打印Linux中网络系统的状态信息 语法 netstat (选项) 选项 -a或--all 显示所有连线中的Socket -c或--continuous 持续列出网络状态 -C或--cache 显示路由器配置的快取信息 -e或--extend 显示网络其他相关信息 -F或--fib 显示FIB -g或--groups 显示多重广播功能群组组员名单 -i或--interfaces 显示网络界面信息表单 -l或--listening 显示监控中的服务器的Socket -M或--masquerade 显示伪装的网络连线 -n或--numeric 直接使用ip地址，而不通过域名服务器 -N或--netlink或--symbolic 显示网络硬件外围设备的符号连接名称 -o或--timers 显示计时器 -p或--programs 显示正在使用Socket的程序识别码和程序名称 -r或--route 显示Routing Table -s或--statistice 显示网络工作信息统计表 -t或--tcp 显示TCP传输协议的连线状况 -u或--udp 显示UDP传输协议的连线状况 -v或--verbose 显示指令执行过程 -w或--raw 显示RAW传输协议的连线状况 -x或--unix 此参数的效果和指定\"-A unix\"参数相同 --ip或--inet 此参数的效果和指定\"-A inet\"参数相同 使用示例 显示tcp, udp的连接情况 netstat -tunlp | grep [port] 通过pid查询进程端口占用 netstat -tunlp | grep [pid] Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/lsof.html":{"url":"docs/net/lsof.html","title":"lsof","keywords":"","body":"lsof语法选项使用示例lsof 查看进程打开的文件、进程打开的端口。 找回/恢复删除的文件。 语法 lsof (选项) 选项 -a 列出打开文件存在的过程 -c 列出指定进程所打开的文件 -p 列出指定进程号所打开的文件 -g 列出gid号进程详情 +d 列出目录下被打开的文件 +D 递归列出目录下被打开的文件 -n 列出使用NFS的文件 -i 列出符合条件的进程 -u 列出uid号进程的详情 使用示例 显示使用端口 4000 的进程 lsof -i:4000 显示进程名包含 dfsrr 的打开文件的信息 lsof -c dfsrr Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/nc.html":{"url":"docs/net/nc.html","title":"nc","keywords":"","body":"nc语法选项参数使用示例nc nc命令是netcat命令的简称, 都是用来设置路由器 语法 nc/netcat(选项)(参数) 选项 -g 设置路由器跃程通信网关，最多设置8个 -G 设置来源路由指向器，其数值为4的倍数 -i 设置时间间隔，以便传送信息及扫描通信端口 -l 使用监听模式，监控传入的资料 -n 直接使用ip地址，而不通过域名服务器 -o 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存 -p 设置本地主机使用的通信端口 -r 指定源端口和目的端口都进行随机的选择 -s 设置本地主机送出数据包的IP地址 -u 使用UDP传输协议 -v 显示指令执行过程 -w 设置等待连线的时间 -z 使用0输入/输出模式，只在扫描通信端口时使用 参数 主机 指定主机ip地址或主机名称 端口号 可以是单个整数或者是一个范围 使用示例 远程拷贝文件 从server1拷贝文件到server2上。需要先在server2上，用nc激活监听。 server2上运行： nc -lp 1234 > install.log server1上运行： nc -w 1 192.168.228.222 1234 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/net/scp.html":{"url":"docs/net/scp.html","title":"scp","keywords":"","body":"scp语法选项参数使用示例scp 用于linux下进行远程拷贝文件，传输加密安全 语法 scp (选项) (参数) 选项 -4 使用ipv4 -6 使用ipv6 -l 指定带宽限制 -P 指定远程主机的端口号 -p 保留文件的最后修改时间、最后访问时间和权限模式 -q 不显示复制进度 -r 以递归方式复制 参数 源文件 指定要复制的源文件 目标文件 目标文件，格式为 user@host:${filename}filename` 为文件名 使用示例 复制到远端 /home/dingfang/ 目录下 $ scp test.log root@196.168.88.11:/home/dingfang/ 从远端复制当前目录下 $ scp root@196.168.88.11:/home/dingfang/hello.txt . Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/clear.html":{"url":"docs/other/clear.html","title":"clear","keywords":"","body":"clear语法使用示例clear 用于清除当前屏幕终端上的任何信息 语法 clear 使用示例 $ clear Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/chkconfig.html":{"url":"docs/other/chkconfig.html","title":"chkconfig","keywords":"","body":"chkconfig语法选项使用示例chkconfig 命令检查、设置系统的各种服务 它不是立即自动禁止或激活一个服务，而是简单的改变了符号链接 语法 chkconfig (选项) 选项 --add 增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据 --del 删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据 --level 指定读系统服务要在哪一个执行等级中开启或关毕 0：表示关机 1：单用户模式 2：无网络连接的多用户命令行模式 3：有网络连接的多用户命令行模式 4：不可用 5：带图形界面的多用户模式 6：重新启动 使用示例 你可能会在脚本文件见到这样的写法 # chkconfig 2345 20 60 2345表示等级2,3,4,520 表示开启是优先级2060表示关闭是优先级60优先级范围:0 ~ 100, 越大优先级越低 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/pidstat.html":{"url":"docs/other/pidstat.html","title":"pidstat","keywords":"","body":"pidstat安装语法选项使用示例示例1示例2示例3示例4pidstat pidstat 用于监控全部或指定进程的cpu、内存、线程、设备io等系统资源的占用情况。 刚运行时显示自系统启动开始的各项统计信息，之后运行显示各统计信息。 安装 # ubuntu apt-get install sysstat # centos yum install sysstat 语法 pidstat [选项] [] [] 选项 -u 默认的参数，显示各个进程的cpu使用统计 -r 显示各个进程的内存使用统计 -d 显示各个进程的io使用情况 -p 指定进程号 -w 显示每个进程的上下文切换情况 -t 显示选择任务的线程的统计信息的额外信息 -T {TASK|CHILD|ALL} 这个选项指定了pidstat监控。 TASK 表示报告独立的task CHILD表示报告进程下所有线程统计信息 ALL 表示报告独立task和task下面的所有线程 task和子线程的全局统计信息和pidstat选项无关，这些统计信息不会 对应到当前的统计间隔，这些统计信息只有在子线程kill或完成时才会被收集 -l 在SMP环境，表示任务的cpu使用率/内核数量 使用示例 示例1 $ pidstat Linux 3.10.0-1127.18.2.el7.x86_64 (izuf63269bclc8z39n3t2cz) 10/21/2020 _x86_64_ (2 CPU) 06:29:09 PM UID PID %usr %system %guest %CPU CPU Command 06:29:09 PM 0 1 0.03 0.04 0.00 0.07 1 systemd 说明 PID 进程id %usr 进程在用户空间占用cpu的百分比 %system 进程在内核空间占用的cpu的百分比 %guest 进程在虚拟机占用的cpu的百分比 %CPU 进程占用的cpu百分比 CPU 处理进程的cpu编号 Command 当前进程对应的命令 示例2 $ pidstat -w Linux 3.10.0-1127.18.2.el7.x86_64 (izuf63269bclc8z39n3t2cz) 10/21/2020 _x86_64_ (2 CPU) 06:36:13 PM UID PID cswch/s nvcswch/s Command 06:36:13 PM 0 1 1.82 0.05 systemd 06:36:13 PM 0 2 0.01 0.00 kthreadd 说明 PID 进程id cswch/s 每秒主动任务上下文切换数量 nvcswch/s 每秒被动任务上下文切换数量 Command 当前进程对应的命令 示例3 $pidstat -d Linux 3.10.0-1127.18.2.el7.x86_64 (izuf63269bclc8z39n3t2cz) 10/21/2020 _x86_64_ (2 CPU) 06:38:34 PM UID PID kB_rd/s kB_wr/s kB_ccwr/s Command 06:38:34 PM 1002 1771 0.05 0.15 0.01 bash 06:38:34 PM 1002 25746 0.00 0.06 0.00 bash 06:38:34 PM 1002 32349 0.00 0.00 0.00 vim 说明 PID 进程id kB_rd/s 每秒从磁盘读取的KB kB_wr/s 每秒写入磁盘KB kB_ccwr/s 任务取消的写入磁盘的KB,当任务截断pagecache的时候会发生 Command 当前进程对应的命令 示例4 $pidstat -r Linux 3.10.0-1127.18.2.el7.x86_64 (izuf63269bclc8z39n3t2cz) 10/21/2020 _x86_64_ (2 CPU) 06:41:24 PM UID PID minflt/s majflt/s VSZ RSS %MEM Command 06:41:24 PM 0 1 16.30 0.00 51832 3796 0.10 systemd 06:41:24 PM 0 374 0.00 0.00 116644 308 0.01 lvmetad 06:41:24 PM 0 481 0.00 0.00 55532 784 0.02 auditd 说明 PID 进程id minflt/s 任务每秒发生的次要错误，不需要从磁盘中加载页 majflt/s 任务每秒发生的主要错误，需要从磁盘中加载页 VSZ 虚拟内存大小KB RSS 物理内存大小KB Command 当前进程对应的命令 Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/tzselect.html":{"url":"docs/other/tzselect.html","title":"tzselect","keywords":"","body":"tzselect修改时区tzselect 设置时区时间 设置时区为亚洲上海 $ timedatectl set-timezone Asia/Shanghai 修改时区 修改时区 $ tzselect 执行命令后会出来很多选项，依次按照下面提示选择 依次选择4->9->1->1 Asia->China-> Beijing->yes 备份时区 $ sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 检查时间, 时区 $ date -R 修改日期 $ sudo date -s MM/DD/YY 修改时间 $ sudo date -s hh:mm:ss 修改生效 $ sudo hwclock --systohc Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/ulimit.html":{"url":"docs/other/ulimit.html","title":"ulimit","keywords":"","body":"ulimit语法选项使用示例ulimit ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制： 所创建的内核文件的大小 进程数据块的大小 Shell 进程创建文件的大小 内存锁住的大小 常驻内存集的大小 打开文件描述符的数量 分配堆栈的最大大小 CPU 时间 单个用户的最大线程数 Shell 进程所能使用的最大虚拟内存。 同时，它支持硬资源和软资源的限制。 语法 ulimit (选项) 选项 -a 显示目前资源限制的设定 -c 设定core文件的最大值，单位为区块 -d 程序数据节区的最大值，单位为KB -f shell所能建立的最大文件，单位为区块 -H 设定资源的硬性限制，也就是管理员所设下的限制 -m 指定可使用内存的上限，单位为KB -n 指定同一时间最多可开启的文件数 -p 指定管道缓冲区的大小，单位512字节 -s 指定堆叠的上限，单位为KB -S 设定资源的弹性限制 -t 指定CPU使用时间的上限，单位为秒 -u 用户最多可开启的程序数目 -v 指定可使用的虚拟内存上限，单位为KB 使用示例 查看各个资源限制情况 $ ulimit -a 设置core文件生成大小无限制 $ ulimit -c unlimited Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "},"docs/other/date.html":{"url":"docs/other/date.html","title":"date","keywords":"","body":"date语法选项参数示例date 显示或设定系统的日期和时间 语法 date (选项) (参数) 选项 d 显示字符串所指的日期和时间(字符串前后最好加上双引号) s 根据字符串来设置日期和时间(字符串前后最好加上双引号) u 显示GMT 参数 指定显示时使用的日期时间格式 时间格式 符号 说明 % 打印 % %n 下一行 %t 跳格 %H 小时(00-23) %l 小时(01-12) %k 小时(0-23) %M 分钟(00-59) %p AM或PM %r 显示时间(12小时制，hh:mm:ss [AP]M %s 从1970-01-01 00:00:00 UTC 到现在的秒数 %S 秒(00-61) %T 显示时间(24小时制) %X %H:%M:%S %Z 显示时区 日期格式 符号 说明 %a 星期(简写) %A 星期(全拼) %b 月份(简写) %B 月份(全拼) %c 日期和时间(Wed 03 Mar 2021 07:00:00 AM CST) %d 日(01-31) %D 显示日期(mm/dd/yy) %h 同%b %j 一年中的第几天(001-366) %m 月份(01-12) %U 一年中的第几周(00-53)(以Sunday为一周的第一天) %W 一年中的第几周(00-53)(以Monday为一周的第一天) %w 一周中的第几天(0-6)(Sunday为0) %x 显示日期(mm/dd/yyyy) %y 年份的最后两位数(00-99) %Y 完整年份(0000-9999) date 在使用时，可以用 [second | min | day | week | month | year] [ago] 来表示多少秒、分钟、天、周、月、年后或前的时间 也可以在数字前用 -, +号来表示前后(替代[ago]) 示例 显示 yyyy-mm-dd HH:MM:SS 的格式时间日期 $ date +\"%Y-%m-%d %H:%M:%S\" 显示 2 天前的时间 $ date -d \"2 day ago\" +\"%Y-%m-%d\" 显示 10 周前的时间 $ date -d \"-10 week\" 显示一周前的下一天 $ date -d \"-1 wekk +1 day\" 还可以指定日期时间来做前后的基准 例如这个指定显示 2020-01-01 的下一个月的日期 $ date -d \"2020-01-01 1 month\" Copyright © 2020-2021 ChangDingFang all right reserved，powered by Gitbook最近一次修订时间: 2021-08-25 18:31:45 "}}